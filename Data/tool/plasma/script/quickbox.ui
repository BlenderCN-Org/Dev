
--=============================================================================
-- ItemLabel
--=============================================================================
local function ItemLabel( gui, text )
   local this = {}

   -- Defaults.
   this.border = { 0, 10, 0, 10 }
   this.anchor = UI.Anchor.BOTTOM_LEFT

   this = gui.vbox( this )

   local label = gui.label{
      text   = text,
      alignH = UI.TextAlignment.MIDDLE,
      font   = { "font/default", 20 }
   }
   this.addWidget( label )

   function this.setLabel( text )
      label.text = text
   end

   function this.setEnable( v )
      this.enabled  = v
      label.enabled = v
   end

   return this
end

--==============================================================================
-- Quickbox
--==============================================================================

function UI.Quickbox( gui, params )
   -- Parameters.
   local params  = params or {}
   params.size   = params.size or {600,280}
   params.border = {8,8,8,8}

   if params.hidden == nil then params.hidden = true end

   local _root = nil

   -- Widget creation.
   local this  = gui.box( params )

   local _br   = gui.plasmaBrowser{ flex=1, offset=0.1 }
   local _back = gui.image{
      image   = "image/ui/back",
      size    = {64,64},
      type    = UI.TQuadType.CENTERED,
      onClick = function() this.back() end
   }
   this.addWidget( _back )
   this.addWidget( _br )


   -- Shader.
   -----------------------------------------------------------------------------
   local bg = this.tquad{
      image = "theme/plasma/image/roundedboxShadow2",
      u     = { 0, 0.4, 0.6, 1 },
      v     = { 0, 0.4, 0.6, 1 },
      color = {0,0,0,1}
   }

   function this.shader( w )
      local pos   = w.globalPosition
      local size  = w.actualSize
      bg.position = pos  - vec2(32,32)
      bg.size     = size + vec2(64,64)
      return bg
   end

   -- Methods.
   -----------------------------------------------------------------------------
   function this.toggle()
      if this.hidden then
         this.show()
      else
         this.hide()
      end
   end
   -----------------------------------------------------------------------------
   function this.show()
      this.hidden = false
      UI.grabKeyboard( this )
      _br.setItems( _root )
      _back.enabled = false
   end
   -----------------------------------------------------------------------------
   function this.hide()
      this.hidden = true
      UI.releaseKeyboard( this )
   end
   -----------------------------------------------------------------------------
   function this.back()
      _br.popItems()
      if _br.numStacks() == 1 then _back.enabled = false end
   end
   -----------------------------------------------------------------------------
   local keyPressFunc = {
      [UI.Key.ESC]         = this.hide,
      [UI.Key.UP_ARROW]    = this.back,
      [UI.Key.DOWN_ARROW]  = function() _br.onItemSelect( _br, _br.currentItem ) end,
      [UI.Key.RETURN]      = function() _br.onItemSelect( _br, _br.currentItem ) end,
      [UI.Key.SPACE]       = this.toggle,
      [UI.Key.LEFT_ARROW]  = function() _br.currentItem = _br.currentItem-1 end,
      [UI.Key.RIGHT_ARROW] = function() _br.currentItem = _br.currentItem+1 end,
   }
   function this.onKeyPress( w, ev )
      local func = keyPressFunc[ev.value]
      if func then func( w, ev ) end
   end
   -----------------------------------------------------------------------------
   function _br.onItemSelect( w, i )
      local item = w[i]
      -- Do we have a function to execute?
      local func = item.onSelect
      if func then
         func( item )
      end
      -- Do it have a link to switch to?
      local link = item.link
      if link then
         _br.pushItems( link )
         _back.enabled = true
      else
         -- Nothing more to do, so we hide ourself.
         this.hide()
      end
   end
   -----------------------------------------------------------------------------
   function this.addCommands( cmds )
      for i, v in ipairs( cmds ) do
         _root[#_root+1] = gui.browserItem{
            geometry = "geometry/editor/quad",
            onSelect = v.onSelect,
            ItemLabel( gui, v.name ),
         }
      end
   end
   -----------------------------------------------------------------------------
   function this.createList( list )
      if list == nil or #list == 0 then return end
      local lgui = ObjectPool( "UI" )
      local ilist = { pool = lgui }
      for i, v in ipairs( list ) do
         ilist[#ilist+1] = lgui.browserItem{
            geometry = "geometry/editor/quad",
            onSelect = v.onSelect,
            ItemLabel( lgui, v.name ),
         }
      end
      return ilist
   end

   -----------------------------------------------------------------------------
   local function createNode( item )
      local gr  = this.graph
      local box = gr.getBoundingBox()
      local pos
      if box.size.x > 0 then
         if this.viewer then
            local a = this.viewer.getVisibleArea()
            local w = 3
            local c = a.position
            local r = a.size
            local v = true
            pos = gr.findSpot( w, c, r, v )
         else
            -- Simply place under everything.
            pos = box.position + vec2(0, -2)
         end
      else
         -- Empty, center at origin.
         pos = vec2(-1,0)
      end
      gr.createNode( item.name, { position=pos } )
   end

   -----------------------------------------------------------------------------
   local function createNodeList()
      nodesType = {
         gui.browserItem{ geometry="geometry/editor/quad", ItemLabel( gui, "Animation" ) },
         gui.browserItem{ geometry="geometry/editor/quad", ItemLabel( gui, "Geometry" ) },
         gui.browserItem{ geometry="geometry/editor/quad", ItemLabel( gui, "Image" ) },
         gui.browserItem{ geometry="geometry/editor/quad", ItemLabel( gui, "World" ) },
         gui.browserItem{ geometry="geometry/editor/quad", ItemLabel( gui, "Strokes" ) },
         gui.browserItem{ geometry="geometry/editor/quad", ItemLabel( gui, "Polygon" ) },
      }

      nodes = {}

      local nspecs = DataFlow.getNodeSpecs()
      for i,v in ipairs( nspecs ) do
         local clist     = nodes[v.type] or {}
         nodes[v.type]   = clist
         clist[#clist+1] = gui.browserItem{
            geometry = "geometry/editor/quad",
            material = "geometry/editor/dfnode",
            mparams  = { image=v.icon },
            name     = v.name,
            onSelect = createNode,
            ItemLabel( gui, v.label )
         }
      end

      nodesType[1].link = nodes.ANIMATION
      nodesType[2].link = nodes.GEOMETRY
      nodesType[3].link = nodes.IMAGE
      nodesType[4].link = nodes.WORLD
      nodesType[5].link = nodes.STROKES
      nodesType[6].link = nodes.POLYGON

      return nodesType
   end

   -----------------------------------------------------------------------------
   -- Create default root list.
   -----------------------------------------------------------------------------
   _root = {
      gui.browserItem{ geometry="geometry/editor/quad", ItemLabel( gui, "Create node" ), link=createNodeList() },
   }


   _br.setItems( _root )

   return this
end
