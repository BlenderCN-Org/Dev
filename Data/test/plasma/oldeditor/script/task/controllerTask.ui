include( "script/task/taskInterface" )
include( "script/util/cgmath" )
include( "script/ui/inputWidgets" )

--==============================================================================
-- Controller Task plugin script.
-- This task is a testbed for controller manipulation.
--==============================================================================

local res = ObjectPool( "RES" )

--local backgroundColor = { 0.60, 0.75, 0.95, 1.00 }
local backgroundColor = { 0.8, 0.8, 0.8, 1.0 }
--local backgroundColor = { 1.2, 1.2, 1.2, 1.0 }
--local backgroundColor = { 1.0, 1.0, 1.0, 1.0 }

--==============================================================================
-- ControllerTask
--==============================================================================

local function ControllerTask( params )
   local this = TaskInterface( params )
   local ui   = this.ui

   local entityCtrl
   local flyByManip

   -----------------------------------------------------------------------------
   -- Methods
   -----------------------------------------------------------------------------

   -----------------------------------------------------------------------------
   local frameID   = 0
   local framePath = "screen_%05d"
   function this.screenGrab( silent )
      local filename = string.format( framePath, frameID )
      UI.screenGrab( filename )
      if not silent then
         print("Dumped: " .. filename)
      end
      frameID = frameID + 1
   end

   -----------------------------------------------------------------------------
   function this.close()
      if this._world then res.remove( this._world ) end
   end
   -----------------------------------------------------------------------------
   function this.open()
      print( "Opening Regression." )
   end
   -----------------------------------------------------------------------------
   function this.save()
      print( "Saving Regression." )
   end
   -----------------------------------------------------------------------------
   function this.hotkey( ev )
      local key = ev.value
      if key == UI.Key.SLASH then
         PlasmaConfig.wireframe = not PlasmaConfig.wireframe
      elseif key == UI.Key.c then
         local camPos = this._screen.cameraPosition
         print( "campos = { " .. camPos[1] .. ", " .. camPos[2] .. ", " .. camPos[3] .. " }" )
         local camOri = this._screen.cameraOrientation
         print( "camori = { " .. camOri[1] .. ", " .. camOri[2] .. ", " .. camOri[3] .. ", " .. camOri[4] .. " }" )
      elseif key == UI.Key.h then
         --this._regressionPanel.hidden = not this._regressionPanel.hidden
      elseif key == UI.Key.m then
         this.toggleManipulator()
      elseif key == UI.Key.M then
         this.toggleManipulatorMode()
      elseif key == UI.Key.P then
         this.screenGrab()
      end
   end
   -----------------------------------------------------------------------------
   function this.keyPress( ev )
      local key = ev.value
   end
   -----------------------------------------------------------------------------
   function this.keyRelease( ev )
      local key = ev.value
   end
   -----------------------------------------------------------------------------
   function this.toggleManipulator()
      local curManip = this._screen.manipulator
      --if curManip == flyByManip then
      --   print("Switching to default manipulator")
      --   this._screen.manipulator = flyByManip.next
      --else
      --   print("Switching to flyby manipulator")
      --   this._screen.manipulator = flyByManip
      --end
      if curManip == entityCtrl then
         print("Switching to default manipulator")
         this._screen.manipulator = entityCtrl.next
      else
         print("Switching to entity controller")
         this._screen.manipulator = entityCtrl
      end
   end
   -----------------------------------------------------------------------------
   function this.toggleManipulatorMode()
      local curManip = this._screen.manipulator
      local mode = curManip.mode
      if mode then
         mode = (mode + 1) % 2
         print("Setting mode to " .. mode)
         curManip.mode = mode
      end
   end
   -----------------------------------------------------------------------------
   function this.worldCb( w )
      print( string.format( "World loaded (took %.2f s).", os.clock()-timeStart ) )
      --this._regressionPanel.title = "Loaded"
      this.setWorld( w )
      this.toggleManipulator()
   end
   -----------------------------------------------------------------------------
   function this.setWorld( w )
      local ow = this._world
      if ow then res.remove( ow ) end
      if w then w.backgroundColor = backgroundColor end
      this._world = w
      this._screen.world = w
      w.startSimulation()
   end
   -----------------------------------------------------------------------------
   function this.load( name, params )
      print( "Loading world: " .. name, params )
      --this._regressionPanel.title = "Loading..."
      timeStart = os.clock()
      res.newWorld( name, params, this.worldCb )
   end

   -----------------------------------------------------------------------------
   --  Data members
   -----------------------------------------------------------------------------
   this.name  = "Controller " .. tostring(this.id)

   -----------------------------------------------------------------------------
   -- UI
   this.desktop.color = backgroundColor

   this._screen = ui.plasmaScreen{
      flex       = 1,
      renderSize = {-1,-1},
   }
   this.desktop.addWidget( this._screen )

   entityCtrl = gui.EntityController{ next=this._screen.manipulator }
   --this._screen.manipulator = entityCtrl

   flyByManip = gui.FlyByManipulator{ next=this._screen.manipulator }
   --this._screen.manipulator = flyByManip

   --[[
   local regression = os.getenv("PLASMA_REGRESSION")
   if regression then
      print("Lauching user-specified regression:", regression)
      this.load( pathJoin(regressionDir, regression) )
   end
   --]]
   this.load( "world/controller/test01" )

   -----------------------------------------------------------------------------
   return this
end

--==============================================================================
-- REGISTRATION
--==============================================================================

registerTask( "Controller", { create = ControllerTask } )
