--==============================================================================
--  Include files
--==============================================================================

include( "theme/default" )
include( "script/ui/inputWidgets" )
include( "script/util/table" )

gui = ObjectPool()

local ssid = 0
local function nextScreenShotName()
   local name = "screenshot" .. ssid -- .. ".png"
   ssid = ssid + 1
   return name
end

--==============================================================================
--  Ui definition.
--==============================================================================

local function createAccel( pos )
   local panel
   local xyz = UI.vec3Input( gui, {} )
   local onOff = gui.toggle{
      text = "On",
      toggled = true,
      onClick = function( w, ev )
         if w.toggled then
            w.text = "On"
            panel.accelerometer = true
         else
            w.text = "Off"
            panel.accelerometer = false
         end
      end,
   }
   panel = gui.panel{
      title          = "ACCEL",
      gap            = 6,
      minimizeButton = false,
      closeButton    = false,
      orientation    = UI.BoxOrientation.VERTICAL,
      resizableH     = false,
      resizableV     = false,
      position       = pos or { 50, 50 },
      xyz,
      onOff,
   }
   function panel.onAccelerate( w, ev )
      xyz.setValue( {ev.dx, ev.dy, ev.dz } )
   end
   panel.accelerometer = true
   return panel
end

local function createPointerPanel( pos, size )
   local panel
   local xy = UI.vec2Input( gui, { format="%d", enabled=false } )
   local relative = gui.toggle{
      text = "Relative",
      toggled = false,
      onClick = function( w, ev )
      end,
   }
   panel = gui.panel{
      title          = "Pointer",
      gap            = 6,
      minimizeButton = false,
      closeButton    = false,
      orientation    = UI.BoxOrientation.VERTICAL,
      resizableH     = false,
      resizableV     = false,
      position       = pos or { 50, 50 },
      xy,
      relative,
   }
   function panel.onPointerMove( w, ev )
      xy.setValue( ev.position )
   end
   return panel
end

local function createDesktop()

   local menu
   local pointerPanel

   --==============================================================================
   -- CALLBACKS
   --==============================================================================
   function pointerPress( w, ev )
      print( "P", ev.pointerID, table.toString(ev.position), ev.type )
   end
   function pointerMove( w, ev )
      print( "M", ev.pointerID, table.toString(ev.position), ev.type )
      pointerPanel.onPointerMove( w, ev )
   end
   function pointerRelease( w, ev )
      print( "R", ev.pointerID, table.toString(ev.position), ev.type )
   end
   local function charHandler( widget, ev )
      local key = ev.value
      if key == UI.Key.ESC or key == UI.Key.q then
         UI.exit()
      end
   end
   local function keyPress( widget, ev )
      local key = ev.value
      -- Just keep real keypressed.
      if ev.repeated then
         return
      end
      if key == UI.Key.SPACE then
         local pos    = UI.getPointerPosition()
         local center = menu.center
         UI.getDesktop().modal( menu, { pos[1] - center[1], pos[2] - center[2] } )
      elseif key == UI.Key.s then
         print("Screenshot")
         UI.screenGrab( nextScreenShotName() )
      end
   end

   --==============================================================================
   -- UI
   --==============================================================================

   menu = gui.radialMenu{
      radius = 80,
      gui.radialButton{ text = "Option1", onClick = function() print( "1" ) end },
      gui.radialButton{ text = "Option2", onClick = function() print( "2" ) end },
      gui.radialButton{ text = "Option3", onClick = function() print( "3" ) end },
      gui.radialButton{ text = "Option4", onClick = function() print( "4" ) end },
      gui.radialButton{ text = "Option5", onClick = function() print( "5" ) end },
      gui.radialButton{ text = "Option6", onClick = function() print( "6" ) end },
   }

   pointerPanel = createPointerPanel( {10,0} )

   return gui.desktop{
      color            = { 0.5, 0.5, 0.5, 1.0 },
      onChar           = charHandler,
      onKeyPress       = keyPress,
      onKeyRelease     = keyRelease,
      onPointerPress   = pointerPress,
      onPointerMove    = pointerMove,
      onPointerRelease = pointerRelease,
      gui.panel{
         title          = "Widgets",
         gap            = 6,
         minimizeButton = true,
         closeButton    = true,
         orientation    = UI.BoxOrientation.VERTICAL,
         resizableH     = true,
         resizableV     = true,
         position       = { 10, 250 },
         gui.hbox{
            gui.label{ text = "An active label" },
            gui.label{ text = "A disabled label", enabled = false },
         },
         gui.hbox{
            gap = 6,
            gui.button{ text = "Button" },
            gui.button{ text = "Button", enabled = false },
            gui.toggle{ text = "Toggle" },
         },
         gui.separator{},
         gui.valueEditor{ value = 10, format = "%.15g", max = 10000, step = 1 },
         gui.textEntry{ text = "text0123456789" },
      },
      createAccel( {10,125} ),
      gui.button{
         text = "Screenshot",
         position = { 10, 450 },
         onClick = function() UI.screenGrab( nextScreenShotName() ) end
      },
      pointerPanel,
   }
end

--------------------------------------------------------------------------------
-- Set the main desktop.
UI.setDesktop( createDesktop() )
