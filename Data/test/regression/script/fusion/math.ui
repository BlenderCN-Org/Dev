addRoot( "regression" )
include( "unitTest" )

tot = Result()
res = Result()


--===========================================================================
-- Vector Constructors
--===========================================================================
res.reset()

local v2 = vec2()
TEST_ADD( res, v2 )
TEST_ADD( res, #v2 == 2 )
TEST_ADD( res, v2.x == 0 )
TEST_ADD( res, v2.y == 0 )
TEST_ADD( res, v2.z == nil )

local v2 = vec2(1)
TEST_ADD( res, v2.x == 1 )
TEST_ADD( res, v2.y == 1 )

local v2 = vec2(2,3)
TEST_ADD( res, v2.x == 2 )
TEST_ADD( res, v2.y == 3 )
TEST_ADD( res, v2[0] == nil )
TEST_ADD( res, v2[1] == 2   )
TEST_ADD( res, v2[2] == 3   )
TEST_ADD( res, v2[3] == nil )
TEST_ADD( res, v2[4] == nil )
TEST_ADD( res, v2[5] == nil )

v2.x = v2.x*-11
v2.y = v2.y*-111
TEST_ADD( res,      v2 ~= vec2(0,0) )
TEST_ADD( res, not( v2 == vec2(0,0)) )
TEST_ADD( res,      v2 == vec2(-22,-333) )

local v3 = vec3()
TEST_ADD( res, v3 )
TEST_ADD( res, #v3 == 3 )
TEST_ADD( res, v3.x == 0 )
TEST_ADD( res, v3.y == 0 )
TEST_ADD( res, v3.z == 0 )
TEST_ADD( res, v3.w == nil )

local v3 = vec3(1)
TEST_ADD( res, v3.x == 1 )
TEST_ADD( res, v3.y == 1 )
TEST_ADD( res, v3.z == 1 )

local v3 = vec3(2,3,4)
TEST_ADD( res, v3.x == 2 )
TEST_ADD( res, v3.y == 3 )
TEST_ADD( res, v3.z == 4 )
TEST_ADD( res, v3[0] == nil )
TEST_ADD( res, v3[1] == 2   )
TEST_ADD( res, v3[2] == 3   )
TEST_ADD( res, v3[3] == 4   )
TEST_ADD( res, v3[4] == nil )
TEST_ADD( res, v3[5] == nil )

v3.x = v3.x*-11
v3.y = v3.y*-111
v3.z = v3.z*-1111
TEST_ADD( res,      v3 ~= vec3(0) )
TEST_ADD( res, not( v3 == vec3(0)) )
TEST_ADD( res,      v3 == vec3(-22,-333,-4444) )

local v4 = vec4()
TEST_ADD( res, v4 )
TEST_ADD( res, #v4 == 4 )
TEST_ADD( res, v4.x == 0 )
TEST_ADD( res, v4.y == 0 )
TEST_ADD( res, v4.z == 0 )
TEST_ADD( res, v4.w == 0 )
TEST_ADD( res, v4.a == nil )

local v4 = vec4(1)
TEST_ADD( res, v4.x == 1 )
TEST_ADD( res, v4.y == 1 )
TEST_ADD( res, v4.z == 1 )
TEST_ADD( res, v4.w == 1 )

local v4 = vec4(2,3,4,5)
TEST_ADD( res, v4.x == 2 )
TEST_ADD( res, v4.y == 3 )
TEST_ADD( res, v4.z == 4 )
TEST_ADD( res, v4.w == 5 )
TEST_ADD( res, v4[0] == nil )
TEST_ADD( res, v4[1] == 2   )
TEST_ADD( res, v4[2] == 3   )
TEST_ADD( res, v4[3] == 4   )
TEST_ADD( res, v4[4] == 5   )
TEST_ADD( res, v4[5] == nil )

v4.x = v4.x*-11
v4.y = v4.y*-111
v4.z = v4.z*-1111
v4.w = v4.w*-11111
TEST_ADD( res,      v4 ~= vec4(0) )
TEST_ADD( res, not( v4 == vec4(0)) )
TEST_ADD( res,      v4 == vec4(-22,-333,-4444,-55555) )

res.print( "vec  constructors" )
tot.add( res )


--===========================================================================
-- Vector Operators
--===========================================================================
res.reset()

-----------------------------------------------------------------------------
-- Vec2
local op1 = vec2(12)
local op2 = vec2(2,3)

local v2  = op1 + op2
TEST_ADD( res, v2 == vec2(14,15) )

local v2  = op1 - op2
TEST_ADD( res, v2 == vec2(10,9) )

local v2  = op1 * op2
TEST_ADD( res, v2 == vec2(24,36) )

local v2  = op1 / op2
TEST_ADD( res, v2 == vec2(6,4) )

local v2  = -op2
TEST_ADD( res, v2 == vec2(-2,-3) )

TEST_ADD( res, not (op1 == op2) )
TEST_ADD( res,      op1 ~= op2  )
local op2 = vec2( op1.x, op1.y )
TEST_ADD( res,      op1 == op2  )
TEST_ADD( res, not (op1 ~= op2) )

-----------------------------------------------------------------------------
-- Vec3
local op1 = vec3(12)
local op2 = vec3(2,3,4)

local v3  = op1 + op2
TEST_ADD( res, v3 == vec3(14,15,16) )

local v3  = op1 - op2
TEST_ADD( res, v3 == vec3(10,9,8) )

local v3  = op1 * op2
TEST_ADD( res, v3 == vec3(24,36,48) )

local v3  = op1 / op2
TEST_ADD( res, v3 == vec3(6,4,3) )

local v3  = -op2
TEST_ADD( res, v3 == vec3(-2,-3,-4) )

TEST_ADD( res, not (op1 == op2) )
TEST_ADD( res,      op1 ~= op2  )
local op2 = vec3( op1.x, op1.y, op1.z )
TEST_ADD( res,      op1 == op2  )
TEST_ADD( res, not (op1 ~= op2) )

-----------------------------------------------------------------------------
-- Vec4
local op1 = vec4(12)
local op2 = vec4(2,3,4,6)

local v4  = op1 + op2
TEST_ADD( res, v4 == vec4(14,15,16,18) )

local v4  = op1 - op2
TEST_ADD( res, v4 == vec4(10,9,8,6) )

local v4  = op1 * op2
TEST_ADD( res, v4 == vec4(24,36,48,72) )

local v4  = op1 / op2
TEST_ADD( res, v4 == vec4(6,4,3,2) )

local v4  = -op2
TEST_ADD( res, v4 == vec4(-2,-3,-4,-6) )

TEST_ADD( res, not (op1 == op2) )
TEST_ADD( res,      op1 ~= op2  )
local op2 = vec4( op1.x, op1.y, op1.z, op1.w )
TEST_ADD( res,      op1 == op2  )
TEST_ADD( res, not (op1 ~= op2) )

res.print( "vec     operators" )
tot.add( res )


--===========================================================================
-- Vec Swizzles
--===========================================================================
res.reset()

local v = vec2(2,3)
TEST_ADD( res, v.x    == 2 )
TEST_ADD( res, v.y    == 3 )
TEST_ADD( res, v.z    == nil )
TEST_ADD( res, v.w    == nil )
TEST_ADD( res, v.a    == nil )
TEST_ADD( res, v.xx   == vec2(2,2) )
TEST_ADD( res, v.yy   == vec2(3,3) )
TEST_ADD( res, v.zz   == nil )
TEST_ADD( res, v.ww   == nil )
TEST_ADD( res, v.xa   == nil )
TEST_ADD( res, v.yx   == vec2(3,2) )
TEST_ADD( res, v.xxx  == vec3(2,2,2) )
TEST_ADD( res, v.yyy  == vec3(3,3,3) )
TEST_ADD( res, v.zzz  == nil )
TEST_ADD( res, v.www  == nil )
TEST_ADD( res, v.xxa  == nil )
TEST_ADD( res, v.xyx  == vec3(2,3,2) )
TEST_ADD( res, v.zyx  == nil )
TEST_ADD( res, v.xxxx == vec4(2,2,2,2) )
TEST_ADD( res, v.yyyy == vec4(3,3,3,3) )
TEST_ADD( res, v.zzzz == nil )
TEST_ADD( res, v.wwww == nil )
TEST_ADD( res, v.xxxa == nil )
TEST_ADD( res, v.xyyx == vec4(2,3,3,2) )
TEST_ADD( res, v.xzyx == nil )
TEST_ADD( res, v.wzyx == nil )

local v = vec3(2,3,4)
TEST_ADD( res, v.x    == 2 )
TEST_ADD( res, v.y    == 3 )
TEST_ADD( res, v.z    == 4 )
TEST_ADD( res, v.w    == nil )
TEST_ADD( res, v.a    == nil )
TEST_ADD( res, v.xx   == vec2(2,2) )
TEST_ADD( res, v.yy   == vec2(3,3) )
TEST_ADD( res, v.zz   == vec2(4,4) )
TEST_ADD( res, v.ww   == nil )
TEST_ADD( res, v.xa   == nil )
TEST_ADD( res, v.yx   == vec2(3,2) )
TEST_ADD( res, v.xxx  == vec3(2,2,2) )
TEST_ADD( res, v.yyy  == vec3(3,3,3) )
TEST_ADD( res, v.zzz  == vec3(4,4,4) )
TEST_ADD( res, v.www  == nil )
TEST_ADD( res, v.xxa  == nil )
TEST_ADD( res, v.xyx  == vec3(2,3,2) )
TEST_ADD( res, v.zyx  == vec3(4,3,2) )
TEST_ADD( res, v.xxxx == vec4(2,2,2,2) )
TEST_ADD( res, v.yyyy == vec4(3,3,3,3) )
TEST_ADD( res, v.zzzz == vec4(4,4,4,4) )
TEST_ADD( res, v.wwww == nil )
TEST_ADD( res, v.xxxa == nil )
TEST_ADD( res, v.xyyx == vec4(2,3,3,2) )
TEST_ADD( res, v.xzyx == vec4(2,4,3,2) )
TEST_ADD( res, v.wzyx == nil )

local v = vec4(2,3,4,5)
TEST_ADD( res, v.x    == 2 )
TEST_ADD( res, v.y    == 3 )
TEST_ADD( res, v.z    == 4 )
TEST_ADD( res, v.w    == 5 )
TEST_ADD( res, v.a    == nil )
TEST_ADD( res, v.xx   == vec2(2,2) )
TEST_ADD( res, v.yy   == vec2(3,3) )
TEST_ADD( res, v.zz   == vec2(4,4) )
TEST_ADD( res, v.ww   == vec2(5,5) )
TEST_ADD( res, v.xa   == nil )
TEST_ADD( res, v.yx   == vec2(3,2) )
TEST_ADD( res, v.xxx  == vec3(2,2,2) )
TEST_ADD( res, v.yyy  == vec3(3,3,3) )
TEST_ADD( res, v.zzz  == vec3(4,4,4) )
TEST_ADD( res, v.www  == vec3(5,5,5) )
TEST_ADD( res, v.xxa  == nil )
TEST_ADD( res, v.xyx  == vec3(2,3,2) )
TEST_ADD( res, v.zyx  == vec3(4,3,2) )
TEST_ADD( res, v.xxxx == vec4(2,2,2,2) )
TEST_ADD( res, v.yyyy == vec4(3,3,3,3) )
TEST_ADD( res, v.zzzz == vec4(4,4,4,4) )
TEST_ADD( res, v.wwww == vec4(5,5,5,5) )
TEST_ADD( res, v.xxxa == nil )
TEST_ADD( res, v.xyyx == vec4(2,3,3,2) )
TEST_ADD( res, v.xzyx == vec4(2,4,3,2) )
TEST_ADD( res, v.wzyx == vec4(5,4,3,2) )

res.print( "vec      swizzles" )
tot.add( res )


--===========================================================================
-- Vec Others
--===========================================================================
res.reset()

-----------------------------------------------------------------------------
-- tostring
TEST_ADD( res, tostring(vec2(1,2)    ) == "(1,2)"     )
TEST_ADD( res, tostring(vec3(1,2,3)  ) == "(1,2,3)"   )
TEST_ADD( res, tostring(vec4(1,2,3,4)) == "(1,2,3,4)" )

-----------------------------------------------------------------------------
-- Abs
TEST_ADD( res, abs(vec2(-1,-2)) == vec2(1,2) )
TEST_ADD( res, abs(vec3(-1,-2,-3)) == vec3(1,2,3) )
TEST_ADD( res, abs(vec4(-1,-2,-3,-4)) == vec4(1,2,3,4) )

-----------------------------------------------------------------------------
-- Length
local v2 = vec2(3,4)        -- Pythagorean triple: 3, 4, 5
local v3 = vec3(2,3,6)      -- Pythagorean quadruple: 2, 3, 6, 7
local v4 = vec4(5,7,31,101) -- Pythagorean quintuple: 5, 7, 31, 101, 106
TEST_ADD( res, length(v2) ==   5 )
TEST_ADD( res, length(v3) ==   7 )
TEST_ADD( res, length(v4) == 106 )

-----------------------------------------------------------------------------
-- Dot product
TEST_ADD( res, dot(v2, v2) ==   5*5   )
TEST_ADD( res, dot(v3, v3) ==   7*7   )
TEST_ADD( res, dot(v4, v4) == 106*106 )

TEST_ADD( res, dot(vec2(1,2), vec2(5,7)) == (1*5 + 2*7) )
TEST_ADD( res, dot(vec3(1,2,3), vec3(5,7,11)) == (1*5 + 2*7 + 3*11) )
TEST_ADD( res, dot(vec4(1,2,3,4), vec4(5,7,11,13)) == (1*5 + 2*7 + 3*11 + 4*13) )

-----------------------------------------------------------------------------
-- Cross product
TEST_ADD( res, cross(vec3(2, 0, 0), vec3(0, 3, 0)) == vec3(0, 0, 6) )
TEST_ADD( res, cross(vec3(0, 3, 0), vec3(2, 0, 0)) == vec3(0, 0,-6) )
--TEST_ADD( res, cross(vec4(4, 0, 0, 2), vec4(0, 9, 0, 3)) == vec4(0, 0, 36, 0) )

-----------------------------------------------------------------------------
-- Normalization
TEST_ADD( res, normalize(vec3(2, 0, 0)) == vec3(1, 0, 0) )
TEST_ADD( res, normalize(vec3(0,-4, 0)) == vec3(0,-1, 0) )
TEST_ADD( res, normalize(vec3(0, 0, 8)) == vec3(0, 0, 1) )
TEST_ADD( res, math.abs(length(normalize(vec3(2, 8, 4))) - 1) < 0.001 )

res.print( "vec        others" )
tot.add( res )


--===========================================================================
-- Matrix Constructors
--===========================================================================
res.reset()

-----------------------------------------------------------------------------
-- Mat2
local m = mat2()
TEST_ADD( res, m.x0 == 1 and m.x1 == 0 and
               m.y0 == 0 and m.y1 == 1 )

local m = mat2(2)
TEST_ADD( res, m.x0 == 2 and m.x1 == 0 and
               m.y0 == 0 and m.y1 == 2 )

local m = mat2(1,2,3,4)
TEST_ADD( res, m.x0 == 1 and m.x1 == 2 and
               m.y0 == 3 and m.y1 == 4 )

local m = mat2( vec2(2,3), vec2(4,5) )
TEST_ADD( res, m.x0 == 2 and m.x1 == 3 and
               m.y0 == 4 and m.y1 == 5 )

TEST_ADD( res, m.xx == 2 and m.xy == 3 and
               m.yx == 4 and m.yy == 5 )

TEST_ADD( res, m._x0 == 2 and m._y0 == 3 and
               m._x1 == 4 and m._y1 == 5 )

TEST_ADD( res, m._xx == 2 and m._yx == 3 and
               m._xy == 4 and m._yy == 5 )

TEST_ADD( res, m.x == vec2(2,3) and
               m.y == vec2(4,5) )

TEST_ADD( res, m._x == vec2(2,4) and
               m._y == vec2(3,5) )

m.x = vec2(11,21)
m.y = vec2(12,22)
TEST_ADD( res, m.x == vec2(11,21) and
               m.y == vec2(12,22) )

m.x0 = 61; m.x1 = 62;
m.y0 = 71; m.y1 = 72;
TEST_ADD( res, m.x == vec2(61,62) and
               m.y == vec2(71,72) )

m.xx = 66; m.xy = 76;
m.yx = 67; m.yy = 77;
TEST_ADD( res, m.x == vec2(66,76) and
               m.y == vec2(67,77) )

m._x = vec2(11,12)
m._y = vec2(21,22)
TEST_ADD( res, m.x == vec2(11,21) and
               m.y == vec2(12,22) )

m._x0 = 61; m._y0 = 62;
m._x1 = 71; m._y1 = 72;
TEST_ADD( res, m.x == vec2(61,62) and
               m.y == vec2(71,72) )

m._xx = 66; m._yx = 76;
m._xy = 67; m._yy = 77;
TEST_ADD( res, m.x == vec2(66,76) and
               m.y == vec2(67,77) )


-----------------------------------------------------------------------------
-- Mat3
local m = mat3()
TEST_ADD( res, m.x0 == 1 and m.x1 == 0 and m.x2 == 0 and
               m.y0 == 0 and m.y1 == 1 and m.y2 == 0 and
               m.z0 == 0 and m.z1 == 0 and m.z2 == 1 )

local m = mat3(2)
TEST_ADD( res, m.x0 == 2 and m.x1 == 0 and m.x2 == 0 and
               m.y0 == 0 and m.y1 == 2 and m.y2 == 0 and
               m.z0 == 0 and m.z1 == 0 and m.z2 == 2 )

local m = mat3(1,2,3,4,5,6,7,8,9)
TEST_ADD( res, m.x0 == 1 and m.x1 == 2 and m.x2 == 3 and
               m.y0 == 4 and m.y1 == 5 and m.y2 == 6 and
               m.z0 == 7 and m.z1 == 8 and m.z2 == 9 )

local m = mat3( vec3(2,3,4), vec3(5,6,7), vec3(8,9,1) )
TEST_ADD( res, m.x0 == 2 and m.x1 == 3 and m.x2 == 4 and
               m.y0 == 5 and m.y1 == 6 and m.y2 == 7 and
               m.z0 == 8 and m.z1 == 9 and m.z2 == 1 )

TEST_ADD( res, m.xx == 2 and m.xy == 3 and m.xz == 4 and
               m.yx == 5 and m.yy == 6 and m.yz == 7 and
               m.zx == 8 and m.zy == 9 and m.zz == 1 )

TEST_ADD( res, m._x0 == 2 and m._y0 == 3 and m._z0 == 4 and
               m._x1 == 5 and m._y1 == 6 and m._z1 == 7 and
               m._x2 == 8 and m._y2 == 9 and m._z2 == 1 )

TEST_ADD( res, m._xx == 2 and m._yx == 3 and m._zx == 4 and
               m._xy == 5 and m._yy == 6 and m._zy == 7 and
               m._xz == 8 and m._yz == 9 and m._zz == 1 )

TEST_ADD( res, m.x == vec3(2,3,4) and
               m.y == vec3(5,6,7) and
               m.z == vec3(8,9,1) )

TEST_ADD( res, m._x == vec3(2,5,8) and
               m._y == vec3(3,6,9) and
               m._z == vec3(4,7,1) )

m.x = vec3(11,21,31)
m.y = vec3(12,22,32)
m.z = vec3(13,23,33)
TEST_ADD( res, m.x == vec3(11,21,31) and
               m.y == vec3(12,22,32) and
               m.z == vec3(13,23,33) )

m.x0 = 61; m.x1 = 62; m.x2 = 63;
m.y0 = 71; m.y1 = 72; m.y2 = 73;
m.z0 = 81; m.z1 = 82; m.z2 = 83;
TEST_ADD( res, m.x == vec3(61,62,63) and
               m.y == vec3(71,72,73) and
               m.z == vec3(81,82,83) )

m.xx = 66; m.xy = 76; m.xz = 86;
m.yx = 67; m.yy = 77; m.yz = 87;
m.zx = 68; m.zy = 78; m.zz = 88;
TEST_ADD( res, m.x == vec3(66,76,86) and
               m.y == vec3(67,77,87) and
               m.z == vec3(68,78,88) )

m._x = vec3(11,12,13)
m._y = vec3(21,22,23)
m._z = vec3(31,32,33)
TEST_ADD( res, m.x == vec3(11,21,31) and
               m.y == vec3(12,22,32) and
               m.z == vec3(13,23,33) )

m._x0 = 61; m._y0 = 62; m._z0 = 63;
m._x1 = 71; m._y1 = 72; m._z1 = 73;
m._x2 = 81; m._y2 = 82; m._z2 = 83;
TEST_ADD( res, m.x == vec3(61,62,63) and
               m.y == vec3(71,72,73) and
               m.z == vec3(81,82,83) )

m._xx = 66; m._yx = 76; m._zx = 86;
m._xy = 67; m._yy = 77; m._zy = 87;
m._xz = 68; m._yz = 78; m._zz = 88;
TEST_ADD( res, m.x == vec3(66,76,86) and
               m.y == vec3(67,77,87) and
               m.z == vec3(68,78,88) )


-----------------------------------------------------------------------------
-- Mat4 Constructors
local m = mat4()
TEST_ADD( res, m.x0 == 1 and m.x1 == 0 and m.x2 == 0 and m.x3 == 0 and
               m.y0 == 0 and m.y1 == 1 and m.y2 == 0 and m.y3 == 0 and
               m.z0 == 0 and m.z1 == 0 and m.z2 == 1 and m.z3 == 0 and
               m.w0 == 0 and m.w1 == 0 and m.w2 == 0 and m.w3 == 1 )

local m = mat4(2)
TEST_ADD( res, m.x0 == 2 and m.x1 == 0 and m.x2 == 0 and m.x3 == 0 and
               m.y0 == 0 and m.y1 == 2 and m.y2 == 0 and m.y3 == 0 and
               m.z0 == 0 and m.z1 == 0 and m.z2 == 2 and m.z3 == 0 and
               m.w0 == 0 and m.w1 == 0 and m.w2 == 0 and m.w3 == 2 )

local m = mat4(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)
TEST_ADD( res, m.x0 ==  1 and m.x1 ==  2 and m.x2 ==  3 and m.x3 ==  4 and
               m.y0 ==  5 and m.y1 ==  6 and m.y2 ==  7 and m.y3 ==  8 and
               m.z0 ==  9 and m.z1 == 10 and m.z2 == 11 and m.z3 == 12 and
               m.w0 == 13 and m.w1 == 14 and m.w2 == 15 and m.w3 == 16 )

local m = mat4( vec4(2,3,4,5), vec4(6,7,8,9), vec4(10,11,12,13), vec4(14,15,16,17) )
TEST_ADD( res, m.x0 ==  2 and m.x1 ==  3 and m.x2 ==  4 and m.x3 ==  5 and
               m.y0 ==  6 and m.y1 ==  7 and m.y2 ==  8 and m.y3 ==  9 and
               m.z0 == 10 and m.z1 == 11 and m.z2 == 12 and m.z3 == 13 and
               m.w0 == 14 and m.w1 == 15 and m.w2 == 16 and m.w3 == 17 )

TEST_ADD( res, m.xx ==  2 and m.xy ==  3 and m.xz ==  4 and m.xw ==  5 and
               m.yx ==  6 and m.yy ==  7 and m.yz ==  8 and m.yw ==  9 and
               m.zx == 10 and m.zy == 11 and m.zz == 12 and m.zw == 13 and
               m.wx == 14 and m.wy == 15 and m.wz == 16 and m.ww == 17 )

TEST_ADD( res, m._x0 ==  2 and m._y0 ==  3 and m._z0 ==  4 and m._w0 ==  5 and
               m._x1 ==  6 and m._y1 ==  7 and m._z1 ==  8 and m._w1 ==  9 and
               m._x2 == 10 and m._y2 == 11 and m._z2 == 12 and m._w2 == 13 and
               m._x3 == 14 and m._y3 == 15 and m._z3 == 16 and m._w3 == 17 )

TEST_ADD( res, m._xx ==  2 and m._yx ==  3 and m._zx ==  4 and m._wx ==  5 and
               m._xy ==  6 and m._yy ==  7 and m._zy ==  8 and m._wy ==  9 and
               m._xz == 10 and m._yz == 11 and m._zz == 12 and m._wz == 13 and
               m._xw == 14 and m._yw == 15 and m._zw == 16 and m._ww == 17 )

TEST_ADD( res, m.x == vec4( 2, 3, 4, 5) and
               m.y == vec4( 6, 7, 8, 9) and
               m.z == vec4(10,11,12,13) and
               m.w == vec4(14,15,16,17) )

TEST_ADD( res, m._x == vec4( 2, 6,10,14) and
               m._y == vec4( 3, 7,11,15) and
               m._z == vec4( 4, 8,12,16) and
               m._w == vec4( 5, 9,13,17) )

m.x = vec4(11,21,31,41)
m.y = vec4(12,22,32,42)
m.z = vec4(13,23,33,43)
m.w = vec4(14,24,34,44)
TEST_ADD( res, m.x == vec4(11,21,31,41) and
               m.y == vec4(12,22,32,42) and
               m.z == vec4(13,23,33,43) and
               m.w == vec4(14,24,34,44) )

m.x0 = 61; m.x1 = 62; m.x2 = 63; m.x3 = 64;
m.y0 = 71; m.y1 = 72; m.y2 = 73; m.y3 = 74;
m.z0 = 81; m.z1 = 82; m.z2 = 83; m.z3 = 84;
m.w0 = 91; m.w1 = 92; m.w2 = 93; m.w3 = 94;
TEST_ADD( res, m.x == vec4(61,62,63,64) and
               m.y == vec4(71,72,73,74) and
               m.z == vec4(81,82,83,84) and
               m.w == vec4(91,92,93,94) )

m.xx = 66; m.xy = 76; m.xz = 86; m.xw = 96;
m.yx = 67; m.yy = 77; m.yz = 87; m.yw = 97;
m.zx = 68; m.zy = 78; m.zz = 88; m.zw = 98;
m.wx = 69; m.wy = 79; m.wz = 89; m.ww = 99;
TEST_ADD( res, m.x == vec4(66,76,86,96) and
               m.y == vec4(67,77,87,97) and
               m.z == vec4(68,78,88,98) and
               m.w == vec4(69,79,89,99) )

m._x = vec4(11,12,13,14)
m._y = vec4(21,22,23,24)
m._z = vec4(31,32,33,34)
m._w = vec4(41,42,43,44)
TEST_ADD( res, m.x == vec4(11,21,31,41) and
               m.y == vec4(12,22,32,42) and
               m.z == vec4(13,23,33,43) and
               m.w == vec4(14,24,34,44) )

m._x0 = 61; m._y0 = 62; m._z0 = 63; m._w0 = 64;
m._x1 = 71; m._y1 = 72; m._z1 = 73; m._w1 = 74;
m._x2 = 81; m._y2 = 82; m._z2 = 83; m._w2 = 84;
m._x3 = 91; m._y3 = 92; m._z3 = 93; m._w3 = 94;
TEST_ADD( res, m.x == vec4(61,62,63,64) and
               m.y == vec4(71,72,73,74) and
               m.z == vec4(81,82,83,84) and
               m.w == vec4(91,92,93,94) )

m._xx = 66; m._yx = 76; m._zx = 86; m._wx = 96;
m._xy = 67; m._yy = 77; m._zy = 87; m._wy = 97;
m._xz = 68; m._yz = 78; m._zz = 88; m._wz = 98;
m._xw = 69; m._yw = 79; m._zw = 89; m._ww = 99;
TEST_ADD( res, m.x == vec4(66,76,86,96) and
               m.y == vec4(67,77,87,97) and
               m.z == vec4(68,78,88,98) and
               m.w == vec4(69,79,89,99) )

res.print( "mat  constructors" )
tot.add( res )


--===========================================================================
-- Matrix Operators
--===========================================================================
res.reset()

-----------------------------------------------------------------------------
-- Mat2
local op1 = mat2(12)
local op2 = mat2(2,3,4,6)

local m = op1 + op2
TEST_ADD( res, m.x == vec2(14, 3) and
               m.y == vec2( 4,18) )

local m = op1 - op2
TEST_ADD( res, m.x == vec2(10,-3) and
               m.y == vec2(-4, 6) )

local m = op1 * op2
TEST_ADD( res, m.x == vec2(24,36) and
               m.y == vec2(48,72) )

local m = op1 / op2
TEST_ADD( res, m.x == vec2(6,0) and
               m.y == vec2(0,2) )

local m = -op2
TEST_ADD( res, m.x == vec2(-2,-3) and
               m.y == vec2(-4,-6) )

-----------------------------------------------------------------------------
-- Mat3
local op1 = mat3(12)
local op2 = mat3(2,3,4, 6,12,1, 4,3,2)

local m = op1 + op2
TEST_ADD( res, m.x == vec3(14, 3, 4) and
               m.y == vec3( 6,24, 1) and
               m.z == vec3( 4, 3,14) )

local m = op1 - op2
TEST_ADD( res, m.x == vec3(10,-3,-4) and
               m.y == vec3(-6, 0,-1) and
               m.z == vec3(-4,-3,10) )

local m = op1 * op2
TEST_ADD( res, m.x == vec3(24, 36,48) and
               m.y == vec3(72,144,12) and
               m.z == vec3(48, 36,24) )

local m = op1 / op2
TEST_ADD( res, m.x == vec3( 6, 0, 0) and
               m.y == vec3( 0, 1, 0) and
               m.z == vec3( 0, 0, 6) )

local m = -op2
TEST_ADD( res, m.x == vec3(-2, -3,-4) and
               m.y == vec3(-6,-12,-1) and
               m.z == vec3(-4, -3,-2) )

-----------------------------------------------------------------------------
-- Mat4
local op1 = mat4(12)
local op2 = mat4(1,2,3,4, 5,6,7,8, 8,4,2,1, 7,5,1,3)

local m = op1 + op2
TEST_ADD( res, m.x == vec4(13, 2, 3, 4) and
               m.y == vec4( 5,18, 7, 8) and
               m.z == vec4( 8, 4,14, 1) and
               m.w == vec4( 7, 5, 1,15) )

local m = op1 - op2
TEST_ADD( res, m.x == vec4(11,-2,-3,-4) and
               m.y == vec4(-5, 6,-7,-8) and
               m.z == vec4(-8,-4,10,-1) and
               m.w == vec4(-7,-5,-1, 9) )

local m = op1 * op2
TEST_ADD( res, m.x == vec4(12,24,36,48) and
               m.y == vec4(60,72,84,96) and
               m.z == vec4(96,48,24,12) and
               m.w == vec4(84,60,12,36) )

local m = op1 / op2
TEST_ADD( res, m.x == vec4(12, 0, 0, 0) and
               m.y == vec4( 0, 2, 0, 0) and
               m.z == vec4( 0, 0, 6, 0) and
               m.w == vec4( 0, 0, 0, 4) )

local m = -op2
TEST_ADD( res, m.x == vec4(-1,-2,-3,-4) and
               m.y == vec4(-5,-6,-7,-8) and
               m.z == vec4(-8,-4,-2,-1) and
               m.w == vec4(-7,-5,-1,-3) )

res.print( "mat     operators" )
tot.add( res )


--===========================================================================
-- Matrix-Vector Operators
--===========================================================================
res.reset()

local m = mat4()
local v = vec4(1,2,3,4)
TEST_ADD( res, m*v == vec4(1,2,3,4) )
m = mat4(2)
TEST_ADD( res, m*v == vec4(2,4,6,8) )
m = mat4( 1,0,0,2,
          0,1,0,4,
          0,0,1,6,
          0,0,0,1 )
v = vec4(4,3,2,1)
TEST_ADD( res, m*v == vec4(6,7,8,1) )
--v = vec3(4,3,2)
--TEST_ADD( res, m*v == vec3(6,7,8) )

res.print( "mat-vec operators" )
tot.add( res )


--===========================================================================
-- Quaternion Constructors
--===========================================================================
res.reset()

local kSqrt2_2 = math.sqrt(2) * 0.5

local q = quat()
TEST_ADD( res, q )
TEST_ADD( res, #q == 4 )
TEST_ADD( res, q.x == 0 )
TEST_ADD( res, q.y == 0 )
TEST_ADD( res, q.z == 0 )
TEST_ADD( res, q.w == 1 )

local q = quat( vec3(0,1,0), 0.5 )
TEST_ADD( res, q.x == 0 )
TEST_ADD( res, q.y == 1 )
TEST_ADD( res, q.z == 0 )
TEST_ADD( res, math.abs(q.w) < 1e-5 )

local q = quat( 0.25, vec3(1,0,0) )
TEST_ADD( res, math.abs(q.x - kSqrt2_2) < 1e-5 )
TEST_ADD( res, q.y == 0 )
TEST_ADD( res, q.z == 0 )
TEST_ADD( res, math.abs(q.w - kSqrt2_2) < 1e-5 )

local q = quat( 2, 3, 4, 5 )
TEST_ADD( res, q.x == 2 )
TEST_ADD( res, q.y == 3 )
TEST_ADD( res, q.z == 4 )
TEST_ADD( res, q.w == 5 )
TEST_ADD( res, q[0] == nil )
TEST_ADD( res, q[1] == 2   )
TEST_ADD( res, q[2] == 3   )
TEST_ADD( res, q[3] == 4   )
TEST_ADD( res, q[4] == 5   )
TEST_ADD( res, q[5] == nil )

q.x = q.x*-11
q.y = q.y*-111
q.z = q.z*-1111
q.w = q.w*-11111
TEST_ADD( res,      q ~= quat(0, 0, 0, 0) )
TEST_ADD( res, not( q == quat(0, 0, 0, 0) ) )
TEST_ADD( res,      q == quat(-22,-333,-4444,-55555) )

res.print( "quat constructors" )
tot.add( res )


--===========================================================================
-- Quaternion Operators
--===========================================================================
res.reset()

res.print( "quat    operators" )
tot.add( res )


--===========================================================================
-- Quaternion Others
--===========================================================================
res.reset()

TEST_ADD( res, tostring(quat(1,2,3,4)) == "(1,2,3,4)" )

local q  = quat( vec3(2, 0, 0), 0.5 )
local qn = normalize( q )
TEST_ADD( res, q ~= qn )
local axis,cir = q.toAxisCir()
TEST_ADD( res, axis == vec3(1,0,0) )
TEST_ADD( res, cir  == 0.5         )
local axis,cir = qn.toAxisCir()
TEST_ADD( res, axis == vec3(1,0,0) )
TEST_ADD( res, cir  == 0.5         )
q.normalize()
TEST_ADD( res, q == qn )

local p0 = vec3(1,1,1)
local p1 = qn.toMatrix() * vec4(p0.x, p0.y, p0.z, 1)
local p2 = qn.toMatrix3() * p0
TEST_ADD( res, equal(p1, vec4(1,-1,-1,1)) )
TEST_ADD( res, equal(p2, vec3(1,-1,-1)  ) )

res.print( "quat       others" )
tot.add( res )


print( "====================================" )
tot.print( "            total" )

UI.exit()
