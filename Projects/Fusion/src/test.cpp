/*=============================================================================
   Copyright (c) 2012, Ludo Sapiens Inc. and contributors.
   See accompanying file LICENSE.txt for details.
=============================================================================*/
#include <Base/Dbg/UnitTest.h>

#include <Base/Util/Timer.h>
//#include <Base/Util/Validator.h>

#include <Fusion/Resource/BitmapManipulator.h>
#include <Fusion/Resource/RectPacker.h>
#include <Fusion/Resource/ResManager.h>

#include <CGMath/Dist.h>
#include <CGMath/Noise.h>
#include <CGMath/Vec4.h>

#include <Base/IO/FileDevice.h>
#include <Base/IO/TextStream.h>
#include <CGMath/Vec2.h>

USING_NAMESPACE

#if 1
//------------------------------------------------------------------------------
//!
void read( Vector<Vec2i>& sizes, Vec2i& maxSize, bool& forcePowerOfTwo, bool& allowRotation )
{
   StdErr << "---" << nl;
   TextStream is( new FileDevice("/Users/jph/src/Dev/Projects/rectPacker2.txt", IODevice::MODE_READ) );
   TextStream::LineIterator iter = is.lines();

   int fp2, ar;
   if( sscanf( (*iter).cstr(), "(%d,%d) %d %d", &maxSize.x, &maxSize.y, &fp2, &ar ) != 4 )
   {
      StdErr << "Error reading first line." << nl;
      return;
   }
   forcePowerOfTwo = (fp2 != 0);
   allowRotation   = (ar  != 0);

   ++iter;
   uint s;
   if( sscanf( (*iter).cstr(), "%u", &s ) != 1 )
   {
      StdErr << "Error reading second line." << nl;
      return;
   }

   StdErr << "Reading " << s << " sizes." << nl;
   sizes.resize( s );
   for( uint i = 0; i < s; ++i )
   {
      ++iter;
      Vec2i& v = sizes[i];
      if( sscanf( (*iter).cstr(), "(%d,%d)", &v.x, &v.y ) != 2 )
      {
         StdErr << "Error reading line #" << i + 2 << nl;
      }
   }
}
#endif

//------------------------------------------------------------------------------
//!
void fusion_RectPacker( Test::Result& /*res*/ )
{
   Vec2i size(16, 16);
   Vector< Vec2i > sizes;
   //RectPackerGreedyKdTree packer;
   RectPackerGreedy packer;

#if 1
{
   RectPackerGreedy packer;
   bool forcePowerOfTwo, allowRotation;
   read( sizes, size, forcePowerOfTwo, allowRotation );
   StdErr << "Read " << sizes.size() << " entries." << nl;
   StdErr << "Packing into a " << size << " area with p2=" << forcePowerOfTwo << " ar=" << allowRotation << nl;
   Timer timer;
   size_t s = sizes.size();
   //s = 100;
   bool ok = packer.pack( ConstArrayAdaptor<Vec2i>( sizes.data(), sizeof(sizes[0]) ), s, size, forcePowerOfTwo, allowRotation );
   StdErr << "PackGreedy took " << timer.elapsed() << " seconds --> " << ok << nl;
   return;
}
#endif

   // Test 1.
   sizes.pushBack( Vec2i(8, 8) );
   sizes.pushBack( Vec2i(4, 4) );
   sizes.pushBack( Vec2i(2, 2) );
   sizes.pushBack( Vec2i(1, 1) );
   sizes.pushBack( Vec2i(2, 1) );
   sizes.pushBack( Vec2i(8, 15) );
   sizes.pushBack( Vec2i(2, 1) );
   sizes.pushBack( Vec2i(4, 1) );
   sizes.pushBack( Vec2i(8, 1) );
   if( packer.pack( sizes, size ) )
   {
      StdErr << "SUCCESS!" << nl;
   }
   else
   {
      StdErr << "FAILURE" << nl;
   }
   packer.print();
   //RCP<Bitmap> bmp = packer.getBitmap();
   //bmp->saveFile( "packer" );

   // Test 2.
   packer.clear();
   size = Vec2i( 22, 22 );
   sizes.clear();
   sizes.resize( 4, Vec2i(10, 10) );
   if( packer.pack( sizes, size ) )
   {
      StdErr << "SUCCESS!" << nl;
   }
   else
   {
      StdErr << "FAILURE" << nl;
   }
   packer.print();

   // Test 3.
   packer.clear();
   sizes.clear();
   sizes.resize( 4, Vec2i(10, 10) );
   ConstArrayAdaptor<Vec2i> adaptor( sizes.data(), sizeof(Vec2i) );
   if( packer.pack( adaptor, sizes.size(), Vec2i(2048, 2048) ) )
   {
      StdErr << "SUCCESS!" << nl;
   }
   else
   {
      StdErr << "FAILURE" << nl;
   }
   packer.print();

   // Test 4.
   packer.clear();
   sizes.clear();
   sizes.pushBack( Vec2i(4,1) );
   sizes.pushBack( Vec2i(1,4) );
   sizes.pushBack( Vec2i(1,4) );
   sizes.pushBack( Vec2i(4,1) );
   adaptor.set( sizes.data(), sizeof(Vec2i) );
   if( packer.pack( adaptor, sizes.size(), Vec2i(4, 4), true, true ) )
   {
      StdErr << "SUCCESS!" << nl;
   }
   else
   {
      StdErr << "FAILURE" << nl;
   }
   packer.print();
   RCP<Bitmap> bmp = packer.getBitmap();
   bmp->saveFile( "packer" );
}

//------------------------------------------------------------------------------
//!
void fusion_bitmap( Test::Result& res )
{
   //StdErr << nl;
   RCP<Bitmap> bmp;
   const uchar* pix;

   bmp = new Bitmap( "../../Data/test/regression/image/test/RGBw.png" );
   TEST_ADD( res, bmp->dimension() == Vec3i(4,4,1) );
   TEST_ADD( res, bmp->pixelSize() == 3     );
   TEST_ADD( res, bmp->lineSize()  == 3*4   );
   TEST_ADD( res, bmp->sliceSize() == 3*4*4 );
   TEST_ADD( res, bmp->size()      == 3*4*4 );
   pix = bmp->pixels();
   TEST_ADD( res, pix[0] == 0xFF );
   TEST_ADD( res, pix[1] == 0x00 );
   TEST_ADD( res, pix[2] == 0x00 );
   pix = bmp->pixel( Vec2i(3, 0) );
   TEST_ADD( res, pix[0] == 0x00 );
   TEST_ADD( res, pix[1] == 0xFF );
   TEST_ADD( res, pix[2] == 0x00 );
   pix = bmp->pixel( Vec2i(0, 3) );
   TEST_ADD( res, pix[0] == 0x00 );
   TEST_ADD( res, pix[1] == 0x00 );
   TEST_ADD( res, pix[2] == 0xFF );
   pix = bmp->pixel( Vec2i(3, 3) );
   TEST_ADD( res, pix[0] == 0xFF );
   TEST_ADD( res, pix[1] == 0xFF );
   TEST_ADD( res, pix[2] == 0xFF );

   bmp = new Bitmap( "../../Data/common/image/checker.png" );
   TEST_ADD( res, bmp->dimension() == Vec3i(64,64,1) );
}

//------------------------------------------------------------------------------
//!
void fusion_copy( Test::Result& /*res*/ )
{
   StdErr << nl;
   RCP<Bitmap> src = new Bitmap( "../../Data/test/regression/image/test/RGBw.png" );
   CHECK( src->dimension() == Vec3i(4,4,0) );

   RCP<Bitmap> dst;

   // Fast copies.
   dst = new Bitmap( Vec2i(8), src->pixelType(), src->numChannels() );
   memset( dst->pixels(), 0, dst->size() );
   // Copy src into the top-right quadrant using copyRow.
   BitmapManipulator::copyRow( *src, Vec2i(0, 0), 4, *dst, Vec2i(4, 4+0), 4 );
   BitmapManipulator::copyRow( *src, Vec2i(0, 1), 4, *dst, Vec2i(4, 4+1), 4 );
   BitmapManipulator::copyRow( *src, Vec2i(0, 2), 4, *dst, Vec2i(4, 4+2), 4 );
   BitmapManipulator::copyRow( *src, Vec2i(0, 3), 4, *dst, Vec2i(4, 4+3), 4 );
   // Copy top-right quadrant in the top-left quadrant using copyRowToCol (90CCW).
   BitmapManipulator::copyRowToCol( *dst, Vec2i(4, 4+0), 4, *dst, Vec2i(3, 4), 4 );
   BitmapManipulator::copyRowToCol( *dst, Vec2i(4, 4+1), 4, *dst, Vec2i(2, 4), 4 );
   BitmapManipulator::copyRowToCol( *dst, Vec2i(4, 4+2), 4, *dst, Vec2i(1, 4), 4 );
   BitmapManipulator::copyRowToCol( *dst, Vec2i(4, 4+3), 4, *dst, Vec2i(0, 4), 4 );
   // Copy top-right quadrant in the bottom-left quadrant using copyCol.
   BitmapManipulator::copyCol( *dst, Vec2i(4+0, 4), 4, *dst, Vec2i(0, 0), 4 );
   BitmapManipulator::copyCol( *dst, Vec2i(4+1, 4), 4, *dst, Vec2i(1, 0), 4 );
   BitmapManipulator::copyCol( *dst, Vec2i(4+2, 4), 4, *dst, Vec2i(2, 0), 4 );
   BitmapManipulator::copyCol( *dst, Vec2i(4+3, 4), 4, *dst, Vec2i(3, 0), 4 );
   // Copy top-right quadrant in the bottom-right quadrant using copyColToRow (90CW).
   BitmapManipulator::copyColToRow( *dst, Vec2i(4+0, 4), 4, *dst, Vec2i(4, 3), 4 );
   BitmapManipulator::copyColToRow( *dst, Vec2i(4+1, 4), 4, *dst, Vec2i(4, 2), 4 );
   BitmapManipulator::copyColToRow( *dst, Vec2i(4+2, 4), 4, *dst, Vec2i(4, 1), 4 );
   BitmapManipulator::copyColToRow( *dst, Vec2i(4+3, 4), 4, *dst, Vec2i(4, 0), 4 );
   dst->saveFile( "fast_copy" );
}

//------------------------------------------------------------------------------
//!
void fusion_crop( Test::Result& res )
{
   RCP<Bitmap> src = new Bitmap( Vec2i(8, 8), Bitmap::FLOAT, 4 );
   Vec4f* srcP = (Vec4f*)src->pixels();
   for( int y = 0; y < src->height(); ++y )
   {
      for( int x = 0; x < src->width(); ++x, ++srcP )
      {
         *srcP = Vec4f( float(x+1), float(y+1), float(x+y+2), float((x+1)*(y+1)) );
      }
   }
   TEST_ADD( res, Vec4f::as( (const float*)src->pixel(Vec2i(2,3)) ) == Vec4f( 3, 4, 7, 12 ) );
   RCP<Bitmap> dst;

   dst = BitmapManipulator::crop( *src, Vec2i(1,2), Vec2i(2,3) );
   TEST_ADD( res, dst.isValid() );
   if( dst.isValid() )
   {
      TEST_ADD( res, dst->dimension() == Vec3i(2, 3, 0) );
      TEST_ADD( res, Vec4f::as( (const float*)dst->pixels() ) == Vec4f( 2, 3, 5, 6 ) ); // First.
      TEST_ADD( res, Vec4f::as( (const float*)(dst->pixels()+dst->size()-sizeof(Vec4f)) ) == Vec4f( 3, 5, 8, 15 ) ); // Last.
   }

   dst = BitmapManipulator::crop( *src, Vec2i(-2, -2), Vec2i(3, 4) );
   TEST_ADD( res, dst.isValid() );
   if( dst.isValid() )
   {
      TEST_ADD( res, dst->dimension() == Vec3i(1, 2, 0) );
      TEST_ADD( res, Vec4f::as( (const float*)dst->pixels() ) == Vec4f( 1, 1, 2, 1 ) ); // First.
      TEST_ADD( res, Vec4f::as( (const float*)(dst->pixels()+dst->size()-sizeof(Vec4f)) ) == Vec4f( 1, 2, 3, 2 ) ); // Last.
   }

   dst = BitmapManipulator::crop( *src, Vec2i(7, 6), Vec2i(3, 4) );
   TEST_ADD( res, dst.isValid() );
   if( dst.isValid() )
   {
      TEST_ADD( res, dst->dimension() == Vec3i(1, 2, 0) );
      TEST_ADD( res, Vec4f::as( (const float*)dst->pixels() ) == Vec4f( 8, 7, 15, 56 ) ); // First.
      TEST_ADD( res, Vec4f::as( (const float*)(dst->pixels()+dst->size()-sizeof(Vec4f)) ) == Vec4f( 8, 8, 16, 64 ) ); // Last.
   }
}

//-----------------------------------------------------------------------------
//!
bool checkDistanceField( int maxDist, const Vec2i& size, const uint8_t* data, const float* dist )
{
   bool ok = true;
   RCP<Bitmap> src = new Bitmap( size, Bitmap::BYTE, 1 );
   memcpy( src->pixels(), data, sizeof(data[0])*size.x*size.y );
   //src->print();
   //src->saveFile( "distanceField_src" );

   RCP<Bitmap> dst = BitmapManipulator::grayscaleToDistanceField( *src, maxDist );
   //dst->print();

   ok &= dst->dimension() == src->dimension();
   if( dist )
   {
      for( int y = 0; y < dst->height(); ++y )
      {
         for( int x = 0; x < dst->width(); ++x )
         {
            const float* dstP = (const float*)dst->pixel( Vec2i(x, y) );
            const float* ansP = dist + y*dst->width() + x;
            //bool eq = CGM::equal( (*dstP)*CGM::abs(*dstP), (*ansP), 0.01 );
            float v = CGM::copySign( CGM::sqrt(CGM::abs(*ansP)), *ansP ); // Convert answer into signed square root.
            bool eq = CGM::equal( *dstP, v, 1.0f/355.0f );
            ok &= eq;
            if( !eq )
            {
               float d = (*dstP) - v;
               StdErr << Vec2i(x,y) << ": Got " << *dstP << " expected " << v << " (" << d << ")." << nl;
            }
         }
      }
   }

#if 0
   // Dumping result into file.
   dst = BitmapManipulator::mulAdd( *dst, Vec4f(1.0f/5.0f), Vec4f(0.5f) );
   dst = BitmapManipulator::convert( *dst, Bitmap::BYTE );
   dst->saveFile( "distanceField_dst" );
#endif

   return ok;
}

//-----------------------------------------------------------------------------
//!
void squareDist( float* data, size_t n )
{
   for( size_t i = 0; i < n; ++i )
   {
      data[i] *= CGM::abs(data[i]);
   }
}

//-----------------------------------------------------------------------------
//!
void  squareRootDist( float* data, size_t n )
{
   for( size_t i = 0; i < n; ++i )
   {
      data[i] = CGM::copySign( CGM::sqrt(CGM::abs(data[i])), data[i] );
   }
}

//-----------------------------------------------------------------------------
//!
void fusion_distanceField( Test::Result& res )
{
   //StdErr << nl;

   int      maxDist = 8;
   Vec2i    size;
   uint8_t* pixels;
   float*   answer;
   unused( maxDist );
   unused( size );
   unused( pixels );
   unused( answer );

   uint8_t data_tri4x4[] = {
      0x00, 0x00, 0x00, 0x80,
      0x00, 0x00, 0x80, 0xFF,
      0x00, 0x80, 0xFF, 0xFF,
      0x80, 0xFF, 0xFF, 0xFF,
   };
   float dist_tri4x4[] = {
      // Squared distances.
      4.5f, 2.0f, 0.5f, 0.0f,
      2.0f, 0.5f, 0.0f,-0.5f,
      0.5f, 0.0f,-0.5f,-2.0f,
      0.0f,-0.5f,-2.0f,-4.5f
   };
   //squareRootDist( dist_tri4x4, sizeof(dist_tri4x4)/sizeof(dist_tri4x4[0]) );
   unused( data_tri4x4 );
   unused( dist_tri4x4 );

   uint8_t data8x8[] = {
      0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
      0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   };
   float dist8x8[] = {
      // Non-squared distances.
      // EDTAA:
      //1.5f    ,  0.5f     ,  -0.5f     ,   0.5f     ,   1.5f     ,   0.5f,  -0.5f     ,  0.5f     ,
      //1.56525f,  0.707107f,   0.5f     ,   0.707107f,   0.707107f,   0.5f,   0.5f     ,  0.707107f,
      //2.12132f,  1.56525f ,   1.5f     ,   0.707107f,   0.5f     ,  -0.5f,   0.5f     ,  1.5f     ,
      //2.12132f,  1.56525f ,   0.707107f,   0.5f     ,  -0.5f     ,  -0.5f,   0.5f     ,  1.5f     ,
      //1.56525f,  0.707107f,   0.5f     ,  -0.5f     ,  -0.707107f,  -0.5f,   0.5f     ,  1.5f     ,
      //1.5f    ,  0.5f     ,  -0.5f     ,  -0.5f     ,  -0.5f     ,  -0.5f,   0.5f     ,  1.5f     ,
      //1.56525f,  0.707107f,   0.5f     ,   0.5f     ,   0.5f     ,   0.5f,   0.707107f,  1.56525f ,
      //2.12132f,  1.56525f ,   1.5f     ,   1.5f     ,   1.5f     ,   1.5f,   1.56525f ,  2.12132f ,
      // FullSearch:
      1.58114f,  0.707107f,  -1.5f     ,   0.707107f,   1.58114f ,   0.707107f,  -1.58114f,  0.707107f,
      2.12132f,  1.58114f ,   1.5f     ,   1.58114f ,   1.50245f ,   1.58114f ,   1.5f    ,  1.58114f ,
      2.91548f,  2.54951f ,   2.14488f ,   1.19538f ,   0.707107f,  -1.58114f ,   1.58114f,  1.75664f ,
      2.72561f,  1.85174f ,   1.19538f ,   1.58114f ,  -1.50245f ,  -1.5f     ,   1.58114f,  1.50245f ,
      2.50147f,  1.50245f ,   0.707107f,  -1.58114f ,  -2.12132f ,  -1.5f     ,   1.19538f,  1.85174f ,
      2.54951f,  1.58114f ,  -1.5f     ,  -1.5f     ,  -1.5f     ,  -1.58114f ,   1.58114f,  2.54951f ,
      2.91548f,  2.12132f ,   1.58114f ,   1.58114f ,   1.19538f ,   1.58114f ,   2.12132f,  2.91548f ,
      3.53553f,  2.91548f ,   1.75664f ,   1.50245f ,   1.85174f ,   2.54951f ,   2.91548f,  3.53553f ,
   };
   squareDist( dist8x8, sizeof(dist8x8)/sizeof(dist8x8[0]) );
   unused( data8x8 );
   unused( dist8x8 );

   uint8_t data_quote_39x34[] = {
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x35,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0x35,  0x00,  0x00,  0x00,  0x00,  0x00,  0x35,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0x35,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x50,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0x4f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x50,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0x4f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x6a,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0x69,  0x00,  0x00,  0x00,  0x00,  0x00,  0x6a,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0x69,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x84,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0x83,  0x00,  0x00,  0x00,  0x00,  0x00,  0x84,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0x83,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x9e,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0x9d,  0x00,  0x00,  0x00,  0x00,  0x00,  0x9e,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0x9d,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0xb9,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xb8,  0x00,  0x00,  0x00,  0x00,  0x00,  0xb9,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xb8,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0xd3,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xd2,  0x00,  0x00,  0x00,  0x00,  0x00,  0xd3,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xd2,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0xed,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xec,  0x00,  0x00,  0x00,  0x00,  0x00,  0xed,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xec,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x07,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0x07,  0x00,  0x00,  0x00,  0x07,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0x07,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x21,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0x21,  0x00,  0x00,  0x00,  0x21,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0x21,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x3c,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0x3b,  0x00,  0x00,  0x00,  0x3c,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0x3b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x56,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0x55,  0x00,  0x00,  0x00,  0x56,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0x55,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x70,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0x6f,  0x00,  0x00,  0x00,  0x70,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0x6f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x8a,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0x89,  0x00,  0x00,  0x00,  0x8a,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0x89,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0xa5,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xa4,  0x00,  0x00,  0x00,  0xa5,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xa4,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0xbf,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xbe,  0x00,  0x00,  0x00,  0xbf,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xbe,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0xd9,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xd8,  0x00,  0x00,  0x00,  0xd9,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xd8,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0xf3,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xf2,  0x00,  0x00,  0x00,  0xf3,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xf2,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
      0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
   };
   unused( data_quote_39x34 );

   uint8_t data_A[] = {
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xed, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xee, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xad, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xae, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0x07, 0x00, 0x00, 0x00, 0x00, 0x08, 0xf4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x4c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x98, 0x00, 0x00, 0x00, 0x00, 0x9b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe4, 0x01, 0x00, 0x00, 0x01, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x34, 0x00, 0x00, 0x38, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x82, 0x00, 0x00, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd0, 0x00, 0x00, 0xd6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x25, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x6d, 0x74, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbb, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   };
   unused( data_A );

   uint8_t data_0[] = {
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
   	0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
   	0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
   	0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
   	0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
   	0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x0f,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x0f,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
      0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x08,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x08,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0x0f,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x08,	 0x0f,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0xff,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,
	   0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00,	 0x00
   };
   unused( data_0 );

   uint8_t data_A8x8[] = {
      0x00, 0x00, 0x2d, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x00, 0x00, 0x00, 0xd8, 0xff, 0xff, 0xff, 0xff,
      0x00, 0x00, 0x00, 0x83, 0xff, 0xff, 0xff, 0xff,
      0x00, 0x00, 0x00, 0x2d, 0xff, 0xff, 0xff, 0xff,
      0x00, 0x00, 0x00, 0x00, 0xd8, 0xff, 0xff, 0xff,
      0x00, 0x00, 0x00, 0x00, 0x83, 0xff, 0xff, 0xff,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   };
   float dist_A8x8[] = {
      // EDTAA.
      //2.32353f,  1.32353f,  0.323529f,  -0.676471f ,  -1.67647f  ,  -2.55710f,  -3.49181f,  -4.4598f ,
      //2.53115f,  1.65294f,  0.652941f,  -0.335321f ,  -1.34706f  ,  -2.24834f,  -3.1753f ,  -4.13642f,
      //2.83275f,  1.91504f,  0.986274f,  -0.0132248f,  -1.01373f  ,  -1.94098f,  -2.85535f,  -3.5f    ,
      //3.14926f,  2.22379f,  1.32353f ,   0.312371f ,  -0.676471f ,  -1.67647f,  -2.5f    ,  -2.5f    ,
      //3.4692f ,  2.53115f,  1.65294f ,   0.652941f ,  -0.335321f ,  -1.34706f,  -1.5f    ,  -1.5f    ,
      //3.78641f,  2.83275f,  1.91504f ,   0.986274f ,  -0.0101494f,  -0.5f    ,  -0.5f    ,  -0.5f    ,
      //4.10979f,  3.14926f,  2.22379f ,   1.40444f  ,   0.707107f ,   0.5f    ,   0.5f    ,   0.5f    ,
      //4.45986f,  3.59413f,  2.81865f ,   2.12132f  ,   1.5652500f,   1.5f    ,   1.5f    ,   1.5f    ,
      // FullSearch.
      1.66385f,  0.671377f,  0.321093f,  -0.543717f ,  -0.931887f ,  -1.85505f ,  -2.82109f,  -3.78727f,
      1.80867f,  0.891578f,  0.564402f,  -0.335321f ,  -0.630857f ,  -1.59704f ,  -2.56862f,  -3.55483f,
      2.29593f,  1.62069f ,  0.737137f,  -0.0132248f,  -0.72102f  ,  -1.59964f ,  -2.33264f,  -3.16449f,
      2.59035f,  1.61865f ,  0.653139f,   0.312371f ,  -0.543717f ,  -0.931887f,  -1.85505f,  -2.82109f,
      2.84453f,  1.87905f ,  0.953003f,   0.534421f ,  -0.335321f ,  -0.630857f,  -1.59704f,  -2.5f    ,
      3.18644f,  2.35177f ,  1.63676f ,   0.74963f  ,  -0.0101494f,  -0.72102f ,  -1.5f    ,  -1.5f    ,
      3.7621f ,  2.96581f ,  2.16227f ,   1.42281f  ,   0.685489f ,   0.729408f,   1.5f    ,   1.5f    ,
      4.34892f,  3.57493f ,  2.83547f ,   2.09947f  ,   1.57159f  ,   1.59124f ,   2.1434f ,   2.5f    ,
   };
   squareDist( dist_A8x8, sizeof(dist_A8x8)/sizeof(dist_A8x8[0]) );
   unused( data_A8x8 );
   unused( dist_A8x8 );

#if 0
   // Some performance test.
   Timer timer;
   for( int i = 0; i < 200; ++i )
   {
      //TEST_ADD( res, checkDistanceField( maxDist, Vec2i(48, 56), data_0, NULL ) );
      TEST_ADD( res, checkDistanceField( maxDist, Vec2i(60, 63), data_A, NULL ) );
   }
   StdErr << "Time: " << timer.elapsed() << nl;
   return;
#endif

   TEST_ADD( res, checkDistanceField( maxDist, Vec2i(4, 4), data_tri4x4, dist_tri4x4 ) );
   //TEST_ADD( res, checkDistanceField( maxDist, Vec2i(8, 8), data8x8, dist8x8 ) );
   //TEST_ADD( res, checkDistanceField( maxDist, Vec2i(39, 34), data_quote_39x34, NULL ) );
   //TEST_ADD( res, checkDistanceField( maxDist, Vec2i(60, 63), data_A, NULL ) );
   //TEST_ADD( res, checkDistanceField( maxDist, Vec2i(8,8), data_A8x8, dist_A8x8 ) );

   Vec2i srcIdx = Vec2i( 0, 0 );
   float srcVal = 0.0f;

   Vec2i dstIdx = Vec2i( 1, 1 );
   float dstVal = 0.0f;
   Vec2f dstGrd = Vec2f( 1.0f, 1.0f ).normalize();

// Shorthand for the call.
//#define DIST() BitmapManipulator::distance( srcIdx, srcVal, dstIdx, dstVal, dstGrd )
#define DIST() CGM::grayscaleDistance( srcIdx, srcVal, dstIdx, dstVal, dstGrd )

   TEST_ADD( res, DIST() == CGConstf::infinity() );

   dstVal = 1.0f/2.0f;
   dstGrd = Vec2f( 1.0f, 1.0f ).normalize();
   TEST_ADD( res, equal( DIST(), CGConstf::sqrt2() ) );

   dstVal = 7.0f/8.0f;
   dstGrd = Vec2f( 1.0f, 1.0f ).normalize();
   TEST_ADD( res, equal( DIST(), CGConstf::sqrt2()*0.75f ) );

   dstVal = 1.0f/2.0f;
   dstGrd = Vec2f( 1.0f, 0.0f ).normalize();
   TEST_ADD( res, equal( DIST(), length( Vec2f(1.0f, 0.5f) ) ) ); // UV should be (0,-1), then clamped to (0,-0.5).

   dstVal = 1.0f/2.0f;
   dstGrd = Vec2f( -1.0f, 0.0f ).normalize();
   TEST_ADD( res, equal( DIST(), length( Vec2f(1.0f, 0.5f) ) ) ); // UV should be (0,-1), then clamped to (0,-0.5).

   dstVal = 1.0f/2.0f;
   dstGrd = Vec2f( 0.0f, 1.0f ).normalize();
   TEST_ADD( res, equal( DIST(), length( Vec2f(0.5f, 1.0f) ) ) ); // UV should be (-1,0), then clamped to (-0.5,0).

   dstVal = 1.0f/2.0f;
   dstGrd = Vec2f( 0.0f, -1.0f ).normalize();
   TEST_ADD( res, equal( DIST(), length( Vec2f(0.5f, 1.0f) ) ) ); // UV should be (-1,0), then clamped to (-0.5,0).

   dstIdx = Vec2i( 1, 2 );
   dstVal = 3.0f/4.0f;
   dstGrd = Vec2f( 2.0f, 1.0f ).normalize();
   TEST_ADD( res, equal( DIST(), length( Vec2f(1.0f, 1.5f) ) ) );

   dstIdx = Vec2i( 2, 0 );
   dstVal = float(0x2d)/0xff;
   dstGrd = Vec2f( 0.99247f, -0.122491f );
   //TEST_ADD( res, equal( DIST(), 2.32353f, 0.001f ) );
   TEST_ADD( res, equal( DIST(), 2.30603f, 0.001f ) );

#if 0
   float d = DIST();
   StdErr << ">> " << d << " vs. " << 1.66385f << " (diff=" << (d-1.66385f) << ")" << nl;
   float df;
   df = CGM::grayscaleDistance( dstVal, dstGrd );
   StdErr << "df=" << df << nl;
   df = CGM::grayscaleDistance( dstVal, dstGrd );
   StdErr << "df=" << df << nl;
#endif
}

//-----------------------------------------------------------------------------
//!
bool  equal( const Bitmap& img, const float* ans, float threshold = CGM::EqualityThreshold )
{
   const float* imgP = (const float*)img.pixels();
   const float* ansP = ans;
   bool ok = true;
   for( int y = 0; y < img.height(); ++y )
   {
      for( int x = 0; x < img.width(); ++x, ++imgP, ++ansP )
      {
         if( !equal( *imgP, *ansP, threshold ) )
         {
            ok = false;
            StdErr << Vec2i(x,y) << ": Got " << *imgP << " expected " << *ansP << "." << nl;
         }
      }
   }
   return true;
}

//------------------------------------------------------------------------------
//!
void fusion_edgeDetect( Test::Result& res )
{
   //StdErr << nl;
   float data8x8[] = {
      0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
      0.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f,
      0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
      0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
      0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
      0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
      0.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f,
      0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f,
   };
   float grad8x8[] = {
      0.0f, 0.0f,  0.0f     ,  0.0f     ,   0.0f     ,  0.0f     ,   0.0f     ,  0.0f    ,   0.0f     ,  0.0f     ,  0.0f, 0.0f,  0.0f, 0.0f,  0.0f, 0.0f,
      0.0f, 0.0f,  0.707107f,  0.707107f,  -0.707107f,  0.707107f,  -1.0f     ,  0.0f    ,  -1.0f     ,  0.0f     ,  0.0f, 0.0f,  0.0f, 0.0f,  0.0f, 0.0f,
      0.0f, 0.0f,  0.707107f, -0.707107f,  -0.707107f, -0.707107f,  -0.382683f, -0.92388f,  -0.707107f, -0.707107f,  0.0f, 0.0f,  0.0f, 0.0f,  0.0f, 0.0f,
      0.0f, 0.0f,  0.0f     ,  0.0f     ,  -1        ,  0.0f     ,   0.0f     ,  0.0f    ,   0.0f     ,  0.0f     ,  0.0f, 0.0f,  0.0f, 0.0f,  0.0f, 0.0f,
      0.0f, 0.0f,  0.0f     ,  0.0f     ,  -1        ,  0.0f     ,   0.0f     ,  0.0f    ,   0.0f     ,  0.0f     ,  0.0f, 0.0f,  0.0f, 0.0f,  0.0f, 0.0f,
      0.0f, 0.0f,  0.707107f,  0.707107f,  -0.707107f,  0.707107f,  -0.382683f,  0.92388f,  -0.707107f,  0.707107f,  0.0f, 0.0f,  0.0f, 0.0f,  0.0f, 0.0f,
      0.0f, 0.0f,  0.707107f, -0.707107f,  -0.707107f, -0.707107f,  -1.0f     ,  0.0f    ,  -1.0f     ,  0.0f     ,  0.0f, 0.0f,  0.0f, 0.0f,  0.0f, 0.0f,
      0.0f, 0.0f,  0.0f     ,  0.0f     ,   0.0f     ,  0.0f     ,   0.0f     ,  0.0f    ,   0.0f     ,  0.0f     ,  0.0f, 0.0f,  0.0f, 0.0f,  0.0f, 0.0f,
   };

   RCP<Bitmap> src = new Bitmap( Vec2i(8, 8), Bitmap::FLOAT, 1 );
   memcpy( src->pixels(), data8x8, sizeof(data8x8) );
   //src->print();
   //src->saveFile( "distanceField_src" );

   RCP<Bitmap> dst = BitmapManipulator::edgeDetectFreiChen( *src );
   //dst->print();
   TEST_ADD( res, equal( *dst, grad8x8 ) );
}

//------------------------------------------------------------------------------
//!
void fusion_expand( Test::Result& res )
{
   const char* tmp[] = {
      // Dir     id              Answer
      ""       , "~"           , "~"        , // This one gives an error message.
      ""       , "~/"          , ""         ,
      ""       , "~/a"         , "a"        ,
      "/"      , "~/a"         , "/a"       ,
      "dir"    , "~/a"         , "dir/a"    ,
      "dir/"   , "~/a"         , "dir/a"    ,
      "dir/sub", "~/a"         , "dir/sub/a",
      "dir/sub", "~/../a"      , "dir/a"    ,
      "1/2/"   , "~/../a"      , "1/a"      ,
      "1/2/3/4", "~/../../a"   , "1/2/a"    ,
      "1/2"    , "~/../../../a", "../a"     ,
      nullptr  , nullptr       , nullptr    ,
   };
   for( auto cur = tmp; cur[0] != nullptr; cur += 3 )
   {
      String a = cur[0];
      String b = cur[1];
      String c = cur[2];
      String d = ResManager::expand( a, b );
      //StdErr << "\"" << a << "\", \"" << b << "\" = \"" << d << "\" " << (c==d) << nl;
      TEST_ADD( res, c == d );
   }
}

//------------------------------------------------------------------------------
//!
void fusion_linearH( Test::Result& /*res*/ )
{
   //StdErr << nl;
   RCP<Bitmap> src = new Bitmap( "../../Data/test/regression/image/test/RGBw.png" );

   RCP<Bitmap> dst = new Bitmap( Vec2i((src->dimension().x-1)*2+1, src->dimension().y), src->pixelType(), src->numChannels() );
   memset( dst->pixels(), 0, dst->size() );
   float s = float(src->dimension().x-1);
   s /= (dst->dimension().x-1);
   uchar* dstP = dst->pixels();
   for( uint y = 0; y < (uint)dst->dimension().y; ++y )
   {
      for( uint x = 0; x < (uint)dst->dimension().x; ++x )
      {
         float xf = x*s;
         //StdErr << xf << "," << y << nl;
         BitmapManipulator::linearRGBA8( *src, Vec2f(xf, float(y)), 0, dstP );
         dstP += dst->pixelSize();
      }
      //StdErr << nl;
   }
   dst->saveFile( "linearH" );
}

//------------------------------------------------------------------------------
//!
void fusion_linearV( Test::Result& /*res*/ )
{
   //StdErr << nl;
   RCP<Bitmap> src = new Bitmap( "../../Data/test/regression/image/test/RGBw.png" );

   RCP<Bitmap> dst = new Bitmap( Vec2i(src->dimension().x, (src->dimension().y-1)*2+1), src->pixelType(), src->numChannels() );
   memset( dst->pixels(), 0, dst->size() );
   float s = float(src->dimension().y-1);
   s /= (dst->dimension().y-1);
   uchar* dstP = dst->pixels();
   for( uint y = 0; y < (uint)dst->dimension().y; ++y )
   {
      float yf = y*s;
      for( uint x = 0; x < (uint)dst->dimension().x; ++x )
      {
         //StdErr << x << "," << yf << nl;
         BitmapManipulator::linearRGBA8( *src, Vec2f(float(x), yf), 1, dstP );
         dstP += dst->pixelSize();
      }
      //StdErr << nl;
   }
   dst->saveFile( "linearV" );
}


//------------------------------------------------------------------------------
//!
void fusion_noise_cell1( Test::Result& /*res*/ )
{
   StdErr << nl;
   Vec2i size(1024, 1024);
   //size = Vec2i(2, 2);

   RCP<Bitmap> bmp = new Bitmap( size, Bitmap::BYTE, 1 );
   uchar* dst      = bmp->pixels();
   float s         = 256.0f;
   Vec3f p;
   p.z = 0.0f;
   Timer timer;
   for( int y = 0; y < size.y; ++y )
   {
      p.y  = s*y;
      p.y /= size.y;
      for( int x = 0; x < size.x; ++x )
      {
         p.x     = s*x;
         p.x    /= size.x;
         float n = CGM::cellNoise1( p );
         *dst++  = (uint8_t)(n*255.0f + 0.5f);
      }
   }
   double t = timer.elapsed();
   StdErr << t << " s (" << (size.x * size.y)/t << " gen/s)" << nl;

   bmp->saveFile( "noise_cell1" );
}

//------------------------------------------------------------------------------
//!
void fusion_noise_cell2( Test::Result& /*res*/ )
{
   StdErr << nl;
   Vec2i size(1024, 1024);

   RCP<Bitmap> bmpRGB = new Bitmap( size, Bitmap::BYTE, 3 );
   RCP<Bitmap> bmpR   = new Bitmap( size, Bitmap::BYTE, 1 );
   RCP<Bitmap> bmpG   = new Bitmap( size, Bitmap::BYTE, 1 );
   uchar* rgb         = bmpRGB->pixels();
   uchar* r           = bmpR->pixels();
   uchar* g           = bmpG->pixels();
   float s            = 256.0f;
   Vec3f p;
   p.z = 0.0f;
   Timer timer;
   for( int y = 0; y < size.y; ++y )
   {
      p.y  = s*y;
      p.y /= size.y;
      for( int x = 0; x < size.x; ++x )
      {
         p.x     = s*x;
         p.x    /= size.x;
         Vec2f n = CGM::cellNoise2( p );
         n      *= 255.0f;
         n      += 0.5f; // Rounding.
         *rgb++  = *r++ = (uint8_t)n.x;
         *rgb++  = *g++ = (uint8_t)n.y;
         *rgb++  = 0x00;
      }
   }
   double t = timer.elapsed();
   StdErr << t << " s (" << (size.x * size.y)/t << " gen/s)" << nl;

   bmpRGB->saveFile( "noise_cell2" );
   bmpR->saveFile( "noise_cell2_R" );
   bmpG->saveFile( "noise_cell2_G" );
}

//------------------------------------------------------------------------------
//!
void fusion_noise_cell3( Test::Result& /*res*/ )
{
   StdErr << nl;
   Vec2i size(1024, 1024);

   RCP<Bitmap> bmpRGB = new Bitmap( size, Bitmap::BYTE, 3 );
   RCP<Bitmap> bmpR   = new Bitmap( size, Bitmap::BYTE, 1 );
   RCP<Bitmap> bmpG   = new Bitmap( size, Bitmap::BYTE, 1 );
   RCP<Bitmap> bmpB   = new Bitmap( size, Bitmap::BYTE, 1 );
   uchar* rgb         = bmpRGB->pixels();
   uchar* r           = bmpR->pixels();
   uchar* g           = bmpG->pixels();
   uchar* b           = bmpB->pixels();
   float s            = 256.0f;
   Vec3f p;
   p.z = 0.0f;
   Timer timer;
   for( int y = 0; y < size.y; ++y )
   {
      p.y  = s*y;
      p.y /= size.y;
      for( int x = 0; x < size.x; ++x )
      {
         p.x     = s*x;
         p.x    /= size.x;
         Vec3f n = CGM::cellNoise3( p );
         n      *= 255.0f;
         n      += 0.5f; // Rounding.
         *rgb++  = *r++ = (uint8_t)n.x;
         *rgb++  = *g++ = (uint8_t)n.y;
         *rgb++  = *b++ = (uint8_t)n.z;
      }
   }
   double t = timer.elapsed();
   StdErr << t << " s (" << (size.x * size.y)/t << " gen/s)" << nl;

   bmpRGB->saveFile( "noise_cell3" );
   bmpR->saveFile( "noise_cell3_R" );
   bmpG->saveFile( "noise_cell3_G" );
   bmpB->saveFile( "noise_cell3_B" );
}

//------------------------------------------------------------------------------
//!
void fusion_noise_perlin1( Test::Result& /*res*/ )
{
   StdErr << nl;
   Vec2i size(1024, 1024);

   RCP<Bitmap> bmp = new Bitmap( size, Bitmap::BYTE, 1 );
   uchar* dst      = bmp->pixels();
   float s         = 8.0f/1.0f;
   Vec3f p;
   p.z = 0.0f;
   Timer timer;
   for( int y = 0; y < size.y; ++y )
   {
      p.y  = s*y;
      p.y /= size.y;
      for( int x = 0; x < size.x; ++x )
      {
         p.x     = s*x;
         p.x    /= size.x;
         float n = CGM::perlinNoise1( p );
         *dst++  = (uint8_t)((n + 1.0f) * 0.5f * 255.0f + 0.5f);
      }
   }
   double t = timer.elapsed();
   StdErr << t << " s (" << (size.x * size.y)/t << " gen/s)" << nl;

   bmp->saveFile( "noise_perlin1" );
}

//------------------------------------------------------------------------------
//!
void fusion_noise_perlin2( Test::Result& /*res*/ )
{
   StdErr << nl;
   Vec2i size(1024, 1024);

   RCP<Bitmap> bmpRGB = new Bitmap( size, Bitmap::BYTE, 3 );
   RCP<Bitmap> bmpR   = new Bitmap( size, Bitmap::BYTE, 1 );
   RCP<Bitmap> bmpG   = new Bitmap( size, Bitmap::BYTE, 1 );
   uchar* rgb         = bmpRGB->pixels();
   uchar* r           = bmpR->pixels();
   uchar* g           = bmpG->pixels();
   float s            = 8.0f/1.0f;
   Vec3f p;
   p.z = 0.0f;
   Timer timer;
   for( int y = 0; y < size.y; ++y )
   {
      p.y  = s*y;
      p.y /= size.y;
      for( int x = 0; x < size.x; ++x )
      {
         p.x     = s*x;
         p.x    /= size.x;
         Vec3f n = CGM::perlinNoise3( p );
         n      += 1.0f;
         n      *= 0.5f * 255.0f;
         n      += 0.5f;
         *rgb++  = *r++ = (uint8_t)n.x;
         *rgb++  = *g++ = (uint8_t)n.y;
         *rgb++  = 0x00;
      }
   }
   double t = timer.elapsed();
   StdErr << t << " s (" << (size.x * size.y)/t << " gen/s)" << nl;

   bmpRGB->saveFile( "noise_perlin2" );
   bmpR->saveFile( "noise_perlin2_R" );
   bmpG->saveFile( "noise_perlin2_G" );
}


//------------------------------------------------------------------------------
//!
void fusion_noise_perlin3( Test::Result& /*res*/ )
{
   StdErr << nl;
   Vec2i size(1024, 1024);

   RCP<Bitmap> bmpRGB = new Bitmap( size, Bitmap::BYTE, 3 );
   RCP<Bitmap> bmpR   = new Bitmap( size, Bitmap::BYTE, 1 );
   RCP<Bitmap> bmpG   = new Bitmap( size, Bitmap::BYTE, 1 );
   RCP<Bitmap> bmpB   = new Bitmap( size, Bitmap::BYTE, 1 );
   uchar* rgb         = bmpRGB->pixels();
   uchar* r           = bmpR->pixels();
   uchar* g           = bmpG->pixels();
   uchar* b           = bmpB->pixels();
   float s            = 8.0f/1.0f;
   Vec3f p;
   p.z = 0.0f;
   Timer timer;
   for( int y = 0; y < size.y; ++y )
   {
      p.y  = s*y;
      p.y /= size.y;
      for( int x = 0; x < size.x; ++x )
      {
         p.x     = s*x;
         p.x    /= size.x;
         Vec3f n = CGM::perlinNoise3( p );
         n      += 1.0f;
         n      *= 0.5f * 255.0f;
         n      += 0.5f;
         *rgb++  = *r++ = (uint8_t)n.x;
         *rgb++  = *g++ = (uint8_t)n.y;
         *rgb++  = *b++ = (uint8_t)n.z;
      }
   }
   double t = timer.elapsed();
   StdErr << t << " s (" << (size.x * size.y)/t << " gen/s)" << nl;

   bmpRGB->saveFile( "noise_perlin3" );
   bmpR->saveFile( "noise_perlin3_R" );
   bmpG->saveFile( "noise_perlin3_G" );
   bmpB->saveFile( "noise_perlin3_B" );
}


//------------------------------------------------------------------------------
//!
void fusion_noise_filtered_perlin1( Test::Result& /*res*/ )
{
   StdErr << nl;
   Vec2i size(1024, 1024);

   RCP<Bitmap> bmp = new Bitmap( size, Bitmap::BYTE, 1 );
   uchar* dst      = bmp->pixels();
   float s         = 8.0f/1.0f;
   float w         = 0.5f;
   Vec3f p;
   p.z = 0.0f;
   Timer timer;
   for( int y = 0; y < size.y; ++y )
   {
      p.y  = s*y;
      p.y /= size.y;
      for( int x = 0; x < size.x; ++x )
      {
         p.x     = s*x;
         p.x    /= size.x;
         float n = CGM::filteredPerlinNoise1( p, w );
         n      += 1.0f;
         n      *= 0.5f * 255.0f;
         n      += 0.5f;
         *dst++  = (uint8_t)n;
      }
   }
   double t = timer.elapsed();
   StdErr << t << " s (" << (size.x * size.y)/t << " gen/s)" << nl;

   bmp->saveFile( "noise_filtered_perlin1" );
}


//------------------------------------------------------------------------------
//!
void fusion_noise_filtered_perlin2( Test::Result& /*res*/ )
{
   StdErr << nl;
   Vec2i size(1024, 1024);

   RCP<Bitmap> bmpRGB = new Bitmap( size, Bitmap::BYTE, 3 );
   RCP<Bitmap> bmpR   = new Bitmap( size, Bitmap::BYTE, 1 );
   RCP<Bitmap> bmpG   = new Bitmap( size, Bitmap::BYTE, 1 );
   uchar* rgb         = bmpRGB->pixels();
   uchar* r           = bmpR->pixels();
   uchar* g           = bmpG->pixels();
   float s            = 8.0f/1.0f;
   float w            = 0.5f;
   Vec3f p;
   p.z = 0.0f;
   Timer timer;
   for( int y = 0; y < size.y; ++y )
   {
      p.y  = s*y;
      p.y /= size.y;
      for( int x = 0; x < size.x; ++x )
      {
         p.x     = s*x;
         p.x    /= size.x;
         Vec2f n = CGM::filteredPerlinNoise2( p, w );
         n      += 1.0f;
         n      *= 0.5f * 255.0f;
         n      += 0.5f;
         *rgb++  = *r++ = (uint8_t)n.x;
         *rgb++  = *g++ = (uint8_t)n.y;
         *rgb++  = 0x00;
      }
   }
   double t = timer.elapsed();
   StdErr << t << " s (" << (size.x * size.y)/t << " gen/s)" << nl;

   bmpRGB->saveFile( "noise_filtered_perlin2" );
   bmpR->saveFile( "noise_filtered_perlin2_R" );
   bmpG->saveFile( "noise_filtered_perlin2_G" );
}

//------------------------------------------------------------------------------
//!
void fusion_noise_filtered_perlin3( Test::Result& /*res*/ )
{
   StdErr << nl;
   Vec2i size(1024, 1024);

   RCP<Bitmap> bmpRGB = new Bitmap( size, Bitmap::BYTE, 3 );
   RCP<Bitmap> bmpR   = new Bitmap( size, Bitmap::BYTE, 1 );
   RCP<Bitmap> bmpG   = new Bitmap( size, Bitmap::BYTE, 1 );
   RCP<Bitmap> bmpB   = new Bitmap( size, Bitmap::BYTE, 1 );
   uchar* rgb         = bmpRGB->pixels();
   uchar* r           = bmpR->pixels();
   uchar* g           = bmpG->pixels();
   uchar* b           = bmpB->pixels();
   float s            = 8.0f/1.0f;
   float w            = 0.5f;
   Vec3f p;
   p.z = 0.0f;
   Timer timer;
   for( int y = 0; y < size.y; ++y )
   {
      p.y  = s*y;
      p.y /= size.y;
      for( int x = 0; x < size.x; ++x )
      {
         p.x     = s*x;
         p.x    /= size.x;
         Vec3f n = CGM::filteredPerlinNoise3( p, w );
         n      += 1.0f;
         n      *= 0.5f * 255.0f;
         n      += 0.5f;
         *rgb++  = *r++ = (uint8_t)n.x;
         *rgb++  = *g++ = (uint8_t)n.y;
         *rgb++  = *b++ = (uint8_t)n.z;
      }
   }
   double t = timer.elapsed();
   StdErr << t << " s (" << (size.x * size.y)/t << " gen/s)" << nl;

   bmpRGB->saveFile( "noise_filtered_perlin3" );
   bmpR->saveFile( "noise_filtered_perlin3_R" );
   bmpG->saveFile( "noise_filtered_perlin3_G" );
   bmpB->saveFile( "noise_filtered_perlin3_B" );
}

//------------------------------------------------------------------------------
//!
void fusion_noise_voronoi1( Test::Result& /*res*/ )
{
   StdErr << nl;
   Vec2i size(1024, 1024);

   RCP<Bitmap> bmp = new Bitmap( size, Bitmap::BYTE, 1 );
   uchar* dst      = bmp->pixels();
   float s         = 8.0f/1.0f;
   float j         = 0.5f;
   Vec3f p;
   p.z = 0.0f;
   Timer timer;
   for( int y = 0; y < size.y; ++y )
   {
      p.y  = s*y;
      p.y /= size.y;
      for( int x = 0; x < size.x; ++x )
      {
         Vec3f p1;
         p.x      = s*x;
         p.x     /= size.x;
         float f1 = CGM::voronoiNoise1( p, j, p1 );
         *dst++   = (uint8_t)((f1 + 1.0f) * 0.5f * 255.0f + 0.5f);
      }
   }
   double t = timer.elapsed();
   StdErr << t << " s (" << (size.x * size.y)/t << " gen/s)" << nl;

   bmp->saveFile( "noise_voronoi1" );
}

//------------------------------------------------------------------------------
//!
void fusion_noise_voronoi2( Test::Result& /*res*/ )
{
   StdErr << nl;
   Vec2i size(1024, 1024);

   RCP<Bitmap> bmpRGB = new Bitmap( size, Bitmap::BYTE, 3 );
   RCP<Bitmap> bmpR   = new Bitmap( size, Bitmap::BYTE, 1 );
   RCP<Bitmap> bmpG   = new Bitmap( size, Bitmap::BYTE, 1 );
   uchar* rgb         = bmpRGB->pixels();
   uchar* r           = bmpR->pixels();
   uchar* g           = bmpG->pixels();
   float s            = 8.0f/1.0f;
   float j            = 0.5f;
   Vec3f p;
   p.z = 0.0f;
   Timer timer;
   for( int y = 0; y < size.y; ++y )
   {
      p.y  = s*y;
      p.y /= size.y;
      for( int x = 0; x < size.x; ++x )
      {
         Vec3f p1;
         Vec3f p2;
         p.x     = s*x;
         p.x    /= size.x;
         Vec2f f = CGM::voronoiNoise2( p, j, p1, p2 );
         f      += 1.0f;
         f      *= 0.5f * 255.0f;
         f      += 0.5f;
         *rgb++  = *r++ = (uint8_t)f.x;
         *rgb++  = *g++ = (uint8_t)f.y;
         *rgb++  =        (uint8_t)0x00;
      }
   }
   double t = timer.elapsed();
   StdErr << t << " s (" << (size.x * size.y)/t << " gen/s)" << nl;

   bmpRGB->saveFile( "noise_voronoi2" );
   bmpR->saveFile( "noise_voronoi2_R" );
   bmpG->saveFile( "noise_voronoi2_G" );
}

//------------------------------------------------------------------------------
//!
void fusion_noise_fBm1( Test::Result& /*res*/ )
{
   StdErr << nl;
   Vec2i size(1024, 1024);
   //size = Vec2i(2, 2);

   RCP<Bitmap> bmp = new Bitmap( size, Bitmap::BYTE, 1 );
   uchar* dst      = bmp->pixels();
   float s         = 8.0f;
   float w         = 0.0f;
   Vec3f p;
   p.z = 0.0f;
   Timer timer;
   for( int y = 0; y < size.y; ++y )
   {
      p.y  = s*y;
      p.y /= size.y;
      for( int x = 0; x < size.x; ++x )
      {
         p.x     = s*x;
         p.x    /= size.x;
         float n = CGM::fBmNoise1( p, w );
         n      += 1.0f;
         n      *= 0.5f * 255.0f;
         n      += 0.5f;
         *dst++  = (uint8_t)n;
      }
   }
   double t = timer.elapsed();
   StdErr << t << " s (" << (size.x * size.y)/t << " gen/s)" << nl;

   bmp->saveFile( "noise_fBm1" );
}

inline Vec4f&  asVec4f( Bitmap& bmp, int x, int y )
{
   return Vec4f::as( (float*)bmp.pixel( Vec2i(x, y) ) );
}

//------------------------------------------------------------------------------
//!
void fusion_transform01( Test::Result& res )
{
#define RED1 Vec4f(1.0f, 0.0f, 0.0f, 1.0f)
#define RED2 Vec4f(0.5f, 0.0f, 0.0f, 1.0f)
#define GRN1 Vec4f(0.0f, 1.0f, 0.0f, 1.0f)
#define GRN2 Vec4f(0.0f, 0.5f, 0.0f, 1.0f)
#define BLU1 Vec4f(0.0f, 0.0f, 1.0f, 1.0f)
#define BLU2 Vec4f(0.0f, 0.0f, 0.5f, 1.0f)
#define WHTE Vec4f(1.0f, 1.0f, 1.0f, 1.0f)
#define GRY1 Vec4f(0.51f, 0.51f, 0.51f, 1.0f)
#define GRY2 Vec4f(0.49f, 0.49f, 0.49f, 1.0f)
#define BLCK Vec4f(0.0f, 0.0f, 0.0f, 1.0f)
#define FUL1 Vec4f(1.0f, 2.0f, 3.0f, 4.0f)
   Vec4f data[] = {
      RED1, RED1, GRN1, GRN1,
      RED1, RED2, GRN2, GRN1,
      BLU1, BLU2, GRY2, WHTE,
      BLU1, BLU1, WHTE, FUL1
   };
   RCP<Bitmap> img = new Bitmap( Vec2i(4, 4), Bitmap::FLOAT, 4 );
   memcpy( img->pixels(), data, img->size() );
   TEST_ADD( res, asVec4f( *img, 0, 0 ) == RED1 );
   TEST_ADD( res, asVec4f( *img, 0, 3 ) == BLU1 );
   TEST_ADD( res, asVec4f( *img, 3, 3 ) == FUL1 );

   Mat4f mat;
   Vec4f off;

   mat = Mat4f(
      0.0f, 1.0f, 0.0f, 0.0f,
      1.0f, 0.0f, 0.0f, 0.0f,
      0.0f, 0.0f, 1.0f, 0.0f,
      0.0f, 0.0f, 0.0f, 1.0f
   );
   off = Vec4f(0.0f);
   BitmapManipulator::transform( *img, Vec2i(0), img->dimension()(0,1), mat, off );
   TEST_ADD( res, asVec4f( *img, 0, 0 ) == GRN1 );
   TEST_ADD( res, asVec4f( *img, 0, 3 ) == BLU1 );
   TEST_ADD( res, asVec4f( *img, 3, 3 ) == Vec4f(2.0f, 1.0f, 3.0f, 4.0f) );
}

#if 0
//------------------------------------------------------------------------------
//!
void fusion_validators( Test::Result& res )
{
   Validator* validator;
   validator = new IntValidator(-1, 3);
   TEST_ADD( res, !validator->validate("-2") );
   TEST_ADD( res, validator->validate("-1") );
   TEST_ADD( res, validator->validate("0") );
   TEST_ADD( res, validator->validate("1") );
   TEST_ADD( res, validator->validate("2") );
   TEST_ADD( res, validator->validate("3") );
   TEST_ADD( res, !validator->validate("3.") );
   TEST_ADD( res, !validator->validate("3.0") );
   TEST_ADD( res, !validator->validate("3.1") );
   TEST_ADD( res, !validator->validate("4") );
   TEST_ADD( res, !validator->validate("a") );
   TEST_ADD( res, validator->makeValid("a").empty() );
   TEST_ADD( res, validator->makeValid("2.5") == "2" );
   TEST_ADD( res, validator->makeValid("2.55") == "2" );
   TEST_ADD( res, validator->makeValid("3") == "3" );
   TEST_ADD( res, validator->makeValid("3.0") == "3" );
   delete validator;

   validator = new FltValidator(-1, 3, 1);
   TEST_ADD( res, !validator->validate("-2") );
   TEST_ADD( res, validator->validate("-1") );
   TEST_ADD( res, validator->validate("0") );
   TEST_ADD( res, validator->validate("1") );
   TEST_ADD( res, validator->validate("2") );
   TEST_ADD( res, validator->validate("3") );
   TEST_ADD( res, validator->validate("3.") );
   TEST_ADD( res, validator->validate("3.0") );
   TEST_ADD( res, !validator->validate("3.1") );
   TEST_ADD( res, !validator->validate("4") );
   TEST_ADD( res, !validator->validate("a") );
   TEST_ADD( res, validator->makeValid("a").empty() );
   TEST_ADD( res, validator->makeValid("2.5") == "2.5" );
   TEST_ADD( res, validator->makeValid("2.55") == "2.5" );
   TEST_ADD( res, validator->makeValid("3") == "3.0" );
   TEST_ADD( res, validator->makeValid("3.0") == "3.0" );
   delete validator;
}
#endif

//------------------------------------------------------------------------------
//!
int
main( int argc, char* argv[] )
{
   //Test::standard().add( new Test::Function( "validators", "Tests validators", fusion_validators ) );
   Test::standard().add( new Test::Function( "transform01", "Tests BitmapManipulator::transform()", fusion_transform01 ) );
   Test::standard().add( new Test::Function( "expand"     , "Tests ResManager::expand()"          , fusion_expand      ) );
   Test::standard().add( new Test::Function( "bitmap"     , "Tests Bitmap routines"               , fusion_bitmap      ) );

   Test::special().add( new Test::Function( "copy", "Tests BitmapManipulator::copy*() routines", fusion_copy ) );
   Test::special().add( new Test::Function( "crop", "Tests BitmapManipulator::crop()", fusion_crop ) );
   Test::special().add( new Test::Function( "distanceField", "Tests distance field routines", fusion_distanceField ) );
   Test::special().add( new Test::Function( "edgeDetect", "Tests BitmapManipulator::edgeDetect() routines", fusion_edgeDetect ) );
   Test::special().add( new Test::Function( "linearH", "Tests BitmapManipulator::linearH()", fusion_linearH ) );
   Test::special().add( new Test::Function( "linearV", "Tests BitmapManipulator::linearV()", fusion_linearV ) );

   Test::special().add( new Test::Function( "rect", "Tests RectPacker", fusion_RectPacker ) );

   RCP<Test::Collection> noise = new Test::Collection( "noise", "Collection of noise tests" );
   noise->add( new Test::Function( "noise_cell1", "Tests cellNoise1()", fusion_noise_cell1 ) );
   noise->add( new Test::Function( "noise_cell2", "Tests cellNoise2()", fusion_noise_cell2 ) );
   noise->add( new Test::Function( "noise_cell3", "Tests cellNoise3()", fusion_noise_cell3 ) );
   noise->add( new Test::Function( "noise_perlin1", "Tests perlinNoise1()", fusion_noise_perlin1 ) );
   noise->add( new Test::Function( "noise_perlin2", "Tests perlinNoise2()", fusion_noise_perlin2 ) );
   noise->add( new Test::Function( "noise_perlin3", "Tests perlinNoise3()", fusion_noise_perlin3 ) );
   noise->add( new Test::Function( "noise_filtered_perlin1", "Tests filteredPerlinNoise1()", fusion_noise_filtered_perlin1 ) );
   noise->add( new Test::Function( "noise_filtered_perlin2", "Tests filteredPerlinNoise2()", fusion_noise_filtered_perlin2 ) );
   noise->add( new Test::Function( "noise_filtered_perlin3", "Tests filteredPerlinNoise3()", fusion_noise_filtered_perlin3 ) );
   noise->add( new Test::Function( "noise_voronoi1", "Tests voronoiNoise1()", fusion_noise_voronoi1 ) );
   noise->add( new Test::Function( "noise_voronoi2", "Tests voronoiNoise2()", fusion_noise_voronoi2 ) );
   noise->add( new Test::Function( "noise_fBm1", "Tests fBmNoise1()", fusion_noise_fBm1 ) );
   Test::special().add( noise.ptr() );
   return Test::main( argc, argv );
}
